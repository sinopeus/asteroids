#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.statement.Statement
	c1466 [label=<<table title="model.programs.parsing.language.statement.Statement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Statement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Statement </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + containsAction() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Statement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.ForEach
	c1467 [label=<<table title="model.programs.parsing.language.statement.ForEach" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ForEach.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ForEach </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - type : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> ~ variableName : String </td></tr>
<tr><td align="left" balign="left"> ~ body : Statement </td></tr>
<tr><td align="left" balign="left"> - selection : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> - currentIndex : int </td></tr>
<tr><td align="left" balign="left"> - AtStartOfIteration : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # getType() : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> # canHaveAsType(type : ProgramFactory.ForeachType) : boolean </td></tr>
<tr><td align="left" balign="left"> # setType(type : ProgramFactory.ForeachType) </td></tr>
<tr><td align="left" balign="left"> # getVariableName() : String </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVariable(variableName : String) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVariableName(variableName : String) </td></tr>
<tr><td align="left" balign="left"> # getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getSelection() : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSelection(selection : ArrayList&lt;EntityLiteral&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # calculateSelection() </td></tr>
<tr><td align="left" balign="left"> # getCurrentIndex() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCurrentIndex(selectedIndex : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSelectedIndex(selectedIndex : int) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # isAtStartOfIteration() : boolean </td></tr>
<tr><td align="left" balign="left"> # startIteration() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./ForEach.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Assignment
	c1468 [label=<<table title="model.programs.parsing.language.statement.Assignment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Assignment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Assignment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ variable : Variable </td></tr>
<tr><td align="left" balign="left"> ~ value : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # getVariable() : Variable </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVariable(variable : Variable) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVariable(variable : Variable) </td></tr>
<tr><td align="left" balign="left"> # getValue() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setValue(value : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Assignment.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Print
	c1469 [label=<<table title="model.programs.parsing.language.statement.Print" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Print.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Print </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - textExpression : Expression </td></tr>
<tr><td align="left" balign="left"> - text : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # getTextExpression() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsTextExpression(textExpression : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setTextExpression(textExpression : Expression) </td></tr>
<tr><td align="left" balign="left"> # getText() : String </td></tr>
<tr><td align="left" balign="left"> # canHaveAsText(text : String) : boolean </td></tr>
<tr><td align="left" balign="left"> # setText(text : String) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Print.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.While
	c1470 [label=<<table title="model.programs.parsing.language.statement.While" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./While.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> While </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> - body : Statement </td></tr>
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> + getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./While.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.If
	c1471 [label=<<table title="model.programs.parsing.language.statement.If" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./If.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> If </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> ~ then : Statement </td></tr>
<tr><td align="left" balign="left"> ~ otherwise : Statement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> # getThenStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsThenStatement(then : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setThenStatement(then : Statement) </td></tr>
<tr><td align="left" balign="left"> # getOtherwiseStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsOtherwiseStatement(otherwise : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setOtherwiseStatement(otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> - execute(statement : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./If.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Sequence
	c1472 [label=<<table title="model.programs.parsing.language.statement.Sequence" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sequence.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sequence </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - sequence : List&lt;Statement&gt; </td></tr>
<tr><td align="left" balign="left"> - selectedIndex : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # getSequence() : List&lt;Statement&gt; </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSequence(sequence : List&lt;Statement&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSequence(sequence : List&lt;Statement&gt;) </td></tr>
<tr><td align="left" balign="left"> # getSelectedIndex() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSelectedIndex(selectedIndex : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSelectedIndex(selectedIndex : int) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # getCurrentStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Sequence.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.statement.ForEach extends model.programs.parsing.language.statement.Statement
	c1466:p -> c1467:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.statement.Assignment extends model.programs.parsing.language.statement.Statement
	c1466:p -> c1468:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.statement.Print extends model.programs.parsing.language.statement.Statement
	c1466:p -> c1469:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.statement.While extends model.programs.parsing.language.statement.Statement
	c1466:p -> c1470:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.statement.If extends model.programs.parsing.language.statement.Statement
	c1466:p -> c1471:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.statement.Sequence extends model.programs.parsing.language.statement.Statement
	c1466:p -> c1472:p [dir=back,arrowtail=empty];
}

