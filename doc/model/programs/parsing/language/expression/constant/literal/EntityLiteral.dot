#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.expression.constant.ConstantExpression<T>
	c8127 [label=<<table title="model.programs.parsing.language.expression.constant.ConstantExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../ConstantExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ConstantExpression&lt;T&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # value : T </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ConstantExpression(line : int, column : int, value : T) </td></tr>
<tr><td align="left" balign="left"> + getValue() : T </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : T) : boolean </td></tr>
<tr><td align="left" balign="left"> # setValue(value : T) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../ConstantExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.constant.literal.EntityLiteral
	c8133 [label=<<table title="model.programs.parsing.language.expression.constant.literal.EntityLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./EntityLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EntityLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EntityLiteral(line : int, column : int, entity : Entity) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./EntityLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.expression.constant.literal.EntityLiteral extends model.programs.parsing.language.expression.constant.ConstantExpression<world.entity.Entity>
	c8127:p -> c8133:p [dir=back,arrowtail=empty];
}

