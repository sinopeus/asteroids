#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.expression.first_order.GetX
	c1186 [label=<<table title="model.programs.parsing.language.expression.first_order.GetX" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetX.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetX </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetX(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetX.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.Sine
	c1187 [label=<<table title="model.programs.parsing.language.expression.first_order.Sine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Sine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean
	c1188 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfBooleanToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfBooleanToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfBooleanToBoolean(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfBooleanToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.GetRadius
	c1189 [label=<<table title="model.programs.parsing.language.expression.first_order.GetRadius" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetRadius.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetRadius </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetRadius(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetRadius.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.GetVY
	c1190 [label=<<table title="model.programs.parsing.language.expression.first_order.GetVY" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetVY.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetVY </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetVY(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetVY.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.Cosine
	c1191 [label=<<table title="model.programs.parsing.language.expression.first_order.Cosine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Cosine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Cosine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Cosine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Cosine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.GetY
	c1192 [label=<<table title="model.programs.parsing.language.expression.first_order.GetY" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetY.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetY </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetY(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetY.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c1193 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ argument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpression(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setArgument(argument : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c1194 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfNumberToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfNumberToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfNumberToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfNumberToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.SquareRoot
	c1195 [label=<<table title="model.programs.parsing.language.expression.first_order.SquareRoot" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SquareRoot.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SquareRoot </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SquareRoot(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SquareRoot.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	c1196 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfEntityToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfEntityToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfEntityToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : EntityLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfEntityToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.Not
	c1197 [label=<<table title="model.programs.parsing.language.expression.first_order.Not" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Not.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Not </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Not(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Not.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.GetVX
	c1198 [label=<<table title="model.programs.parsing.language.expression.first_order.GetVX" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetVX.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetVX </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetVX(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetVX.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.expression.first_order.GetX extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	c1196:p -> c1186:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.Sine extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c1194:p -> c1187:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean extends model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c1193:p -> c1188:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.GetRadius extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	c1196:p -> c1189:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.GetVY extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	c1196:p -> c1190:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.Cosine extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c1194:p -> c1191:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.GetY extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	c1196:p -> c1192:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber extends model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c1193:p -> c1194:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.SquareRoot extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c1194:p -> c1195:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber extends model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c1193:p -> c1196:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.Not extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean
	c1188:p -> c1197:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.GetVX extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	c1196:p -> c1198:p [dir=back,arrowtail=empty];
}

