#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.expression.Expression
	c14718 [label=<<table title="model.programs.parsing.language.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + evaluate() : ConstantExpression&lt;?&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getType() : Type </font></td></tr>
		</table></td></tr>
		</table>>, URL="../Expression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c14746 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./SecondOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ firstArgument : Expression </td></tr>
<tr><td align="left" balign="left"> ~ secondArgument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # getFirstArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setFirstArgument(firstArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getSecondArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setSecondArgument(secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	c14748 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean
	c14752 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfBooleansToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfBooleansToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfBooleansToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	c14756 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpression extends model.programs.parsing.language.expression.Expression
	c14718:p -> c14746:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c14746:p -> c14748:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c14746:p -> c14752:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c14746:p -> c14756:p [dir=back,arrowtail=empty];
}

