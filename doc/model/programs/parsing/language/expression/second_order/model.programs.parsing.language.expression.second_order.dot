#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.expression.second_order.And
	c1324 [label=<<table title="model.programs.parsing.language.expression.second_order.And" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./And.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> And </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + And(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./And.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfEntitiesOrDoublesToBoolean
	c1325 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfEntitiesOrDoublesToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfEntitiesOrDoublesToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfEntitiesOrDoublesToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfEntitiesOrDoublesToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : EntityLiteral, second : EntityLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;?&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfEntitiesOrDoublesToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.Or
	c1326 [label=<<table title="model.programs.parsing.language.expression.second_order.Or" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Or.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Or </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Or(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Or.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.Addition
	c1327 [label=<<table title="model.programs.parsing.language.expression.second_order.Addition" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Addition.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Addition </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Addition(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Addition.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.NotEquals
	c1328 [label=<<table title="model.programs.parsing.language.expression.second_order.NotEquals" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NotEquals.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NotEquals </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NotEquals(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> # function(first : EntityLiteral, second : EntityLiteral) : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./NotEquals.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.Equals
	c1329 [label=<<table title="model.programs.parsing.language.expression.second_order.Equals" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Equals.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Equals </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Equals(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> # function(first : EntityLiteral, second : EntityLiteral) : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./Equals.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c1330 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ firstArgument : Expression </td></tr>
<tr><td align="left" balign="left"> ~ secondArgument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpression(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getFirstArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setFirstArgument(firstArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getSecondArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setSecondArgument(secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.GT
	c1331 [label=<<table title="model.programs.parsing.language.expression.second_order.GT" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GT.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GT </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GT(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GT.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	c1332 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfNumbersToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.LT
	c1333 [label=<<table title="model.programs.parsing.language.expression.second_order.LT" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LT.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LT </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LT(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./LT.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.LE
	c1334 [label=<<table title="model.programs.parsing.language.expression.second_order.LE" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LE.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LE </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LE(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./LE.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.Multiplication
	c1335 [label=<<table title="model.programs.parsing.language.expression.second_order.Multiplication" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Multiplication.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Multiplication </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Multiplication(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Multiplication.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean
	c1336 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfBooleansToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfBooleansToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfBooleansToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfBooleansToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.Subtraction
	c1337 [label=<<table title="model.programs.parsing.language.expression.second_order.Subtraction" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Subtraction.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Subtraction </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Subtraction(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Subtraction.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.Division
	c1338 [label=<<table title="model.programs.parsing.language.expression.second_order.Division" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Division.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Division </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Division(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Division.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.GE
	c1339 [label=<<table title="model.programs.parsing.language.expression.second_order.GE" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GE.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GE </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GE(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GE.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	c1340 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfNumbersToNumber(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.expression.second_order.And extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean
	c1336:p -> c1324:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfEntitiesOrDoublesToBoolean extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c1330:p -> c1325:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.Or extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean
	c1336:p -> c1326:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.Addition extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	c1340:p -> c1327:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.NotEquals extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfEntitiesOrDoublesToBoolean
	c1325:p -> c1328:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.Equals extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfEntitiesOrDoublesToBoolean
	c1325:p -> c1329:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.GT extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	c1332:p -> c1331:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c1330:p -> c1332:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.LT extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	c1332:p -> c1333:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.LE extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	c1332:p -> c1334:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.Multiplication extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	c1340:p -> c1335:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c1330:p -> c1336:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.Subtraction extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	c1340:p -> c1337:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.Division extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	c1340:p -> c1338:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.GE extends model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	c1332:p -> c1339:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber extends model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c1330:p -> c1340:p [dir=back,arrowtail=empty];
}

