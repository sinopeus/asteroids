#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// main.CollisionListener
	c6916 [label=<<table title="main.CollisionListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./CollisionListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> CollisionListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + boundaryCollision(entity : Object, x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + objectCollision(entity1 : Object, entity2 : Object, x : double, y : double) </td></tr>
		</table></td></tr>
		</table>>, URL="./CollisionListener.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// main.WorldView<World, Ship, Asteroid, Bullet, Program>
	c6917 [label=<<table title="main.WorldView" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./WorldView.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> WorldView&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - LEFT_P1 : int </td></tr>
<tr><td align="left" balign="left"> - RIGHT_P1 : int </td></tr>
<tr><td align="left" balign="left"> - FIRE_P1 : int </td></tr>
<tr><td align="left" balign="left"> - THRUSTER_P1 : int </td></tr>
<tr><td align="left" balign="left"> - LEFT_P2 : int </td></tr>
<tr><td align="left" balign="left"> - RIGHT_P2 : int </td></tr>
<tr><td align="left" balign="left"> - FIRE_P2 : int </td></tr>
<tr><td align="left" balign="left"> - THRUSTER_P2 : int </td></tr>
<tr><td align="left" balign="left"> - TIMER_DELAY : int </td></tr>
<tr><td align="left" balign="left"> - game : Asteroids&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
<tr><td align="left" balign="left"> - facade : IFacade&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
<tr><td align="left" balign="left"> - world : World </td></tr>
<tr><td align="left" balign="left"> - player1 : Ship </td></tr>
<tr><td align="left" balign="left"> - player2 : Ship </td></tr>
<tr><td align="left" balign="left"> - player2IsAI : boolean </td></tr>
<tr><td align="left" balign="left"> - player1_angle : double </td></tr>
<tr><td align="left" balign="left"> - player2_angle : double </td></tr>
<tr><td align="left" balign="left"> - player1_fire : boolean </td></tr>
<tr><td align="left" balign="left"> - player2_fire : boolean </td></tr>
<tr><td align="left" balign="left"> - timer : Timer </td></tr>
<tr><td align="left" balign="left"> - timeAfterLastEvolve : long </td></tr>
<tr><td align="left" balign="left"> - background : Image </td></tr>
<tr><td align="left" balign="left"> - msg : String </td></tr>
<tr><td align="left" balign="left"> - visualizations : Map&lt;Object, WorldView.Visualization&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - explosions : Set&lt;Explosion&gt; </td></tr>
<tr><td align="left" balign="left"> - asteroidImages : Image[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + isFocusable() : boolean </td></tr>
<tr><td align="left" balign="left"> - drawCenteredString(g2d : Graphics2D, txt : String, y : int) </td></tr>
<tr><td align="left" balign="left"> - drawCenteredString(g2d : Graphics2D, txt : String) </td></tr>
<tr><td align="left" balign="left"> # paintComponent(g : Graphics) </td></tr>
<tr><td align="left" balign="left"> + keyTyped(e : KeyEvent) </td></tr>
<tr><td align="left" balign="left"> + keyPressed(e : KeyEvent) </td></tr>
<tr><td align="left" balign="left"> + keyReleased(e : KeyEvent) </td></tr>
<tr><td align="left" balign="left"> + actionPerformed(e : ActionEvent) </td></tr>
<tr><td align="left" balign="left"> + startGame() </td></tr>
<tr><td align="left" balign="left"> + boundaryCollision(entity : Object, x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + objectCollision(entity1 : Object, entity2 : Object, x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> - getImages() : Image[] </td></tr>
		</table></td></tr>
		</table>>, URL="./WorldView.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//main.WorldView<World, Ship, Asteroid, Bullet, Program> implements main.CollisionListener
	c6916:p -> c6917:p [dir=back,arrowtail=empty,style=dashed];
}

