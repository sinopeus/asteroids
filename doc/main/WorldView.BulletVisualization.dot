#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// main.Asteroids<World, Ship, Asteroid, Bullet, Program>
	c18236 [label=<<table title="main.Asteroids" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Asteroids.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Asteroids&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - menu : AsteroidsMenu&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
<tr><td align="left" balign="left"> - view : WorldView&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
<tr><td align="left" balign="left"> - facade : IFacade&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
<tr><td align="left" balign="left"> - width : int </td></tr>
<tr><td align="left" balign="left"> - height : int </td></tr>
<tr><td align="left" balign="left"> - sound : Sound </td></tr>
<tr><td align="left" balign="left"> - aiProgramUrl : URL </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Asteroids(facade : IFacade&lt;World, Ship, Asteroid, Bullet, Program&gt;, width : int, height : int, undecorated : boolean, sound : Sound, aiProgramUrl : URL) </td></tr>
<tr><td align="left" balign="left"> + getWidth() : int </td></tr>
<tr><td align="left" balign="left"> + getHeight() : int </td></tr>
<tr><td align="left" balign="left"> + getSound() : Sound </td></tr>
<tr><td align="left" balign="left"> + getFacade() : IFacade&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
<tr><td align="left" balign="left"> + start() </td></tr>
<tr><td align="left" balign="left"> + startSinglePlayerGame() </td></tr>
<tr><td align="left" balign="left"> + startMultiPlayerGame(vsAI : boolean) </td></tr>
<tr><td align="left" balign="left"> + showMenu() </td></tr>
<tr><td align="left" balign="left"> + main(args : String[]) </td></tr>
		</table></td></tr>
		</table>>, URL="./Asteroids.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// main.CollisionListener
	c18237 [label=<<table title="main.CollisionListener" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./CollisionListener.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> CollisionListener </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + boundaryCollision(entity : Object, x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + objectCollision(entity1 : Object, entity2 : Object, x : double, y : double) </td></tr>
		</table></td></tr>
		</table>>, URL="./CollisionListener.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// main.Drawable
	c18241 [label=<<table title="main.Drawable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Drawable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Drawable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + draw(g2d : Graphics2D) </td></tr>
		</table></td></tr>
		</table>>, URL="./Drawable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.IFacade<World, Ship, Asteroid, Bullet, Program>
	c18251 [label=<<table title="model.IFacade" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../model/IFacade.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> IFacade&lt;World, Ship, Asteroid, Bullet, Program&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + createWorld(width : double, height : double) : World </td></tr>
<tr><td align="left" balign="left"> + getWorldWidth(world : World) : double </td></tr>
<tr><td align="left" balign="left"> + getWorldHeight(world : World) : double </td></tr>
<tr><td align="left" balign="left"> + getShips(world : World) : Set&lt;Ship&gt; </td></tr>
<tr><td align="left" balign="left"> + getAsteroids(world : World) : Set&lt;Asteroid&gt; </td></tr>
<tr><td align="left" balign="left"> + getBullets(world : World) : Set&lt;Bullet&gt; </td></tr>
<tr><td align="left" balign="left"> + addShip(world : World, ship : Ship) </td></tr>
<tr><td align="left" balign="left"> + addAsteroid(world : World, asteroid : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + removeShip(world : World, ship : Ship) </td></tr>
<tr><td align="left" balign="left"> + removeAsteroid(world : World, asteroid : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + evolve(world : World, dt : double, collisionListener : CollisionListener) </td></tr>
<tr><td align="left" balign="left"> + createShip(x : double, y : double, xVelocity : double, yVelocity : double, radius : double, direction : double, mass : double) : Ship </td></tr>
<tr><td align="left" balign="left"> + isShip(o : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + getShipX(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipY(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipXVelocity(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipYVelocity(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipRadius(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipDirection(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipMass(ship : Ship) : double </td></tr>
<tr><td align="left" balign="left"> + getShipWorld(ship : Ship) : World </td></tr>
<tr><td align="left" balign="left"> + isShipThrusterActive(ship : Ship) : boolean </td></tr>
<tr><td align="left" balign="left"> + setThrusterActive(ship : Ship, active : boolean) </td></tr>
<tr><td align="left" balign="left"> + canFire(ship : Ship) : boolean </td></tr>
<tr><td align="left" balign="left"> + turn(ship : Ship, angle : double) </td></tr>
<tr><td align="left" balign="left"> + fireBullet(ship : Ship) </td></tr>
<tr><td align="left" balign="left"> + createAsteroid(x : double, y : double, xVelocity : double, yVelocity : double, radius : double) : Asteroid </td></tr>
<tr><td align="left" balign="left"> + createAsteroid(x : double, y : double, xVelocity : double, yVelocity : double, radius : double, random : Random) : Asteroid </td></tr>
<tr><td align="left" balign="left"> + isAsteroid(o : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAsteroidX(asteroid : Asteroid) : double </td></tr>
<tr><td align="left" balign="left"> + getAsteroidY(asteroid : Asteroid) : double </td></tr>
<tr><td align="left" balign="left"> + getAsteroidXVelocity(asteroid : Asteroid) : double </td></tr>
<tr><td align="left" balign="left"> + getAsteroidYVelocity(asteroid : Asteroid) : double </td></tr>
<tr><td align="left" balign="left"> + getAsteroidRadius(asteroid : Asteroid) : double </td></tr>
<tr><td align="left" balign="left"> + getAsteroidMass(asteroid : Asteroid) : double </td></tr>
<tr><td align="left" balign="left"> + getAsteroidWorld(asteroid : Asteroid) : World </td></tr>
<tr><td align="left" balign="left"> + isBullets(o : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + getBulletX(bullet : Bullet) : double </td></tr>
<tr><td align="left" balign="left"> + getBulletY(bullet : Bullet) : double </td></tr>
<tr><td align="left" balign="left"> + getBulletXVelocity(bullet : Bullet) : double </td></tr>
<tr><td align="left" balign="left"> + getBulletYVelocity(bullet : Bullet) : double </td></tr>
<tr><td align="left" balign="left"> + getBulletRadius(bullet : Bullet) : double </td></tr>
<tr><td align="left" balign="left"> + getBulletMass(bullet : Bullet) : double </td></tr>
<tr><td align="left" balign="left"> + getBulletWorld(bullet : Bullet) : World </td></tr>
<tr><td align="left" balign="left"> + getBulletSource(bullet : Bullet) : Ship </td></tr>
<tr><td align="left" balign="left"> + parseProgram(text : String) : IFacade.ParseOutcome&lt;Program&gt; </td></tr>
<tr><td align="left" balign="left"> + loadProgramFromStream(stream : InputStream) : IFacade.ParseOutcome&lt;Program&gt; </td></tr>
<tr><td align="left" balign="left"> + loadProgramFromUrl(url : URL) : IFacade.ParseOutcome&lt;Program&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeCheckingSupported() : boolean </td></tr>
<tr><td align="left" balign="left"> + typeCheckProgram(program : Program) : IFacade.TypeCheckOutcome </td></tr>
<tr><td align="left" balign="left"> + setShipProgram(ship : Ship, program : Program) </td></tr>
		</table></td></tr>
		</table>>, URL="../model/IFacade.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//main.WorldView<World, Ship, Asteroid, Bullet, Program>.Visualization<T> implements main.Drawable
	c18241:p -> c18238:p [dir=back,arrowtail=empty,style=dashed];
	//main.WorldView<World, Ship, Asteroid, Bullet, Program>.ShipVisualization extends main.WorldView<World, Ship, Asteroid, Bullet, Program>.Visualization<Ship>
	c18238:p -> c18238:p [dir=back,arrowtail=empty];
	//main.WorldView<World, Ship, Asteroid, Bullet, Program>.AsteroidVisualization extends main.WorldView<World, Ship, Asteroid, Bullet, Program>.Visualization<Asteroid>
	c18238:p -> c18238:p [dir=back,arrowtail=empty];
	//main.WorldView<World, Ship, Asteroid, Bullet, Program>.BulletVisualization extends main.WorldView<World, Ship, Asteroid, Bullet, Program>.Visualization<Bullet>
	c18238:p -> c18238:p [dir=back,arrowtail=empty];
	// main.Asteroids<World, Ship, Asteroid, Bullet, Program> NAVASSOC model.IFacade<World, Ship, Asteroid, Bullet, Program>
	c18236:p -> c18251:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// main.WorldView<World, Ship, Asteroid, Bullet, Program>.Visualization<T> NAVASSOC java.awt.Color
	c18238:p -> c18358:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// main.WorldView<World, Ship, Asteroid, Bullet, Program>.Visualization<T> NAVASSOC java.awt.Image
	c18238:p -> c18359:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// java.awt.Color
	c18358 [label=<<table title="java.awt.Color" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Color.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Color </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + white : Color </td></tr>
<tr><td align="left" balign="left"> + WHITE : Color </td></tr>
<tr><td align="left" balign="left"> + lightGray : Color </td></tr>
<tr><td align="left" balign="left"> + LIGHT_GRAY : Color </td></tr>
<tr><td align="left" balign="left"> + gray : Color </td></tr>
<tr><td align="left" balign="left"> + GRAY : Color </td></tr>
<tr><td align="left" balign="left"> + darkGray : Color </td></tr>
<tr><td align="left" balign="left"> + DARK_GRAY : Color </td></tr>
<tr><td align="left" balign="left"> + black : Color </td></tr>
<tr><td align="left" balign="left"> + BLACK : Color </td></tr>
<tr><td align="left" balign="left"> + red : Color </td></tr>
<tr><td align="left" balign="left"> + RED : Color </td></tr>
<tr><td align="left" balign="left"> + pink : Color </td></tr>
<tr><td align="left" balign="left"> + PINK : Color </td></tr>
<tr><td align="left" balign="left"> + orange : Color </td></tr>
<tr><td align="left" balign="left"> + ORANGE : Color </td></tr>
<tr><td align="left" balign="left"> + yellow : Color </td></tr>
<tr><td align="left" balign="left"> + YELLOW : Color </td></tr>
<tr><td align="left" balign="left"> + green : Color </td></tr>
<tr><td align="left" balign="left"> + GREEN : Color </td></tr>
<tr><td align="left" balign="left"> + magenta : Color </td></tr>
<tr><td align="left" balign="left"> + MAGENTA : Color </td></tr>
<tr><td align="left" balign="left"> + cyan : Color </td></tr>
<tr><td align="left" balign="left"> + CYAN : Color </td></tr>
<tr><td align="left" balign="left"> + blue : Color </td></tr>
<tr><td align="left" balign="left"> + BLUE : Color </td></tr>
<tr><td align="left" balign="left"> ~ value : int </td></tr>
<tr><td align="left" balign="left"> - frgbvalue : float[] </td></tr>
<tr><td align="left" balign="left"> - fvalue : float[] </td></tr>
<tr><td align="left" balign="left"> - falpha : float </td></tr>
<tr><td align="left" balign="left"> - cs : ColorSpace </td></tr>
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
<tr><td align="left" balign="left"> - FACTOR : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Color(arg0 : int, arg1 : int, arg2 : int) </td></tr>
<tr><td align="left" balign="left"> + Color(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> + Color(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + Color(arg0 : int, arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + Color(arg0 : float, arg1 : float, arg2 : float) </td></tr>
<tr><td align="left" balign="left"> + Color(arg0 : float, arg1 : float, arg2 : float, arg3 : float) </td></tr>
<tr><td align="left" balign="left"> + Color(arg0 : ColorSpace, arg1 : float[], arg2 : float) </td></tr>
<tr><td align="left" balign="left"> - initIDs() </td></tr>
<tr><td align="left" balign="left"> - testColorValueRange(arg0 : int, arg1 : int, arg2 : int, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> - testColorValueRange(arg0 : float, arg1 : float, arg2 : float, arg3 : float) </td></tr>
<tr><td align="left" balign="left"> + getRed() : int </td></tr>
<tr><td align="left" balign="left"> + getGreen() : int </td></tr>
<tr><td align="left" balign="left"> + getBlue() : int </td></tr>
<tr><td align="left" balign="left"> + getAlpha() : int </td></tr>
<tr><td align="left" balign="left"> + getRGB() : int </td></tr>
<tr><td align="left" balign="left"> + brighter() : Color </td></tr>
<tr><td align="left" balign="left"> + darker() : Color </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + decode(arg0 : String) : Color </td></tr>
<tr><td align="left" balign="left"> + getColor(arg0 : String) : Color </td></tr>
<tr><td align="left" balign="left"> + getColor(arg0 : String, arg1 : Color) : Color </td></tr>
<tr><td align="left" balign="left"> + getColor(arg0 : String, arg1 : int) : Color </td></tr>
<tr><td align="left" balign="left"> + HSBtoRGB(arg0 : float, arg1 : float, arg2 : float) : int </td></tr>
<tr><td align="left" balign="left"> + RGBtoHSB(arg0 : int, arg1 : int, arg2 : int, arg3 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getHSBColor(arg0 : float, arg1 : float, arg2 : float) : Color </td></tr>
<tr><td align="left" balign="left"> + getRGBComponents(arg0 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getRGBColorComponents(arg0 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getComponents(arg0 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getColorComponents(arg0 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getComponents(arg0 : ColorSpace, arg1 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getColorComponents(arg0 : ColorSpace, arg1 : float[]) : float[] </td></tr>
<tr><td align="left" balign="left"> + getColorSpace() : ColorSpace </td></tr>
<tr><td align="left" balign="left"> + createContext(arg0 : ColorModel, arg1 : Rectangle, arg2 : Rectangle2D, arg3 : AffineTransform, arg4 : RenderingHints) : PaintContext </td></tr>
<tr><td align="left" balign="left"> + getTransparency() : int </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Color.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.awt.Image
	c18359 [label=<<table title="java.awt.Image" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Image.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Image </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - defaultImageCaps : ImageCapabilities </td></tr>
<tr><td align="left" balign="left"> # accelerationPriority : float </td></tr>
<tr><td align="left" balign="left"> + UndefinedProperty : Object </td></tr>
<tr><td align="left" balign="left"> + SCALE_DEFAULT : int </td></tr>
<tr><td align="left" balign="left"> + SCALE_FAST : int </td></tr>
<tr><td align="left" balign="left"> + SCALE_SMOOTH : int </td></tr>
<tr><td align="left" balign="left"> + SCALE_REPLICATE : int </td></tr>
<tr><td align="left" balign="left"> + SCALE_AREA_AVERAGING : int </td></tr>
<tr><td align="left" balign="left"> ~ surfaceManager : SurfaceManager </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Image() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getWidth(arg0 : ImageObserver) : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getHeight(arg0 : ImageObserver) : int </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getSource() : ImageProducer </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getGraphics() : Graphics </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getProperty(arg0 : String, arg1 : ImageObserver) : Object </font></td></tr>
<tr><td align="left" balign="left"> + getScaledInstance(arg0 : int, arg1 : int, arg2 : int) : Image </td></tr>
<tr><td align="left" balign="left"> + flush() </td></tr>
<tr><td align="left" balign="left"> + getCapabilities(arg0 : GraphicsConfiguration) : ImageCapabilities </td></tr>
<tr><td align="left" balign="left"> + setAccelerationPriority(arg0 : float) </td></tr>
<tr><td align="left" balign="left"> + getAccelerationPriority() : float </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Image.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

