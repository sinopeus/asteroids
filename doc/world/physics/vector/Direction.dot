#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// world.entity.Entity
	c7429 [label=<<table title="world.entity.Entity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../entity/Entity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Entity </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # position : Position </td></tr>
<tr><td align="left" balign="left"> # velocity : Velocity </td></tr>
<tr><td align="left" balign="left"> # direction : Direction </td></tr>
<tr><td align="left" balign="left"> - shape : CircleShape </td></tr>
<tr><td align="left" balign="left"> # speedLimit : double </td></tr>
<tr><td align="left" balign="left"> - mass : Mass </td></tr>
<tr><td align="left" balign="left"> # world : World </td></tr>
<tr><td align="left" balign="left"> # isTerminated : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Entity(direction : Direction, position : Position, speedLimit : double, velocity : Velocity, shape : CircleShape, mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + Entity() </td></tr>
<tr><td align="left" balign="left"> + getPosition() : Position </td></tr>
<tr><td align="left" balign="left"> # canHaveAsPosition(position : Position) : boolean </td></tr>
<tr><td align="left" balign="left"> # setPosition(position : Position) </td></tr>
<tr><td align="left" balign="left"> + getVelocity() : Velocity </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVelocity(velocity : Velocity) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVelocity(velocity : Velocity) </td></tr>
<tr><td align="left" balign="left"> + getDirection() : Direction </td></tr>
<tr><td align="left" balign="left"> # canHaveAsDirection(direction : Direction) : boolean </td></tr>
<tr><td align="left" balign="left"> # setDirection(direction : Direction) </td></tr>
<tr><td align="left" balign="left"> + getShape() : CircleShape </td></tr>
<tr><td align="left" balign="left"> # canHaveAsShape(shape : CircleShape) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSpeedLimit() : double </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSpeedLimit(speedLimit : double) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSpeedLimit(speedLimit : double) </td></tr>
<tr><td align="left" balign="left"> + getMass() : Mass </td></tr>
<tr><td align="left" balign="left"> # canHaveAsMass(mass : Mass) : boolean </td></tr>
<tr><td align="left" balign="left"> # setMass(mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + getWorld() : World </td></tr>
<tr><td align="left" balign="left"> - canHaveAsWorld(world : World) : boolean </td></tr>
<tr><td align="left" balign="left"> + setWorld(world : World) </td></tr>
<tr><td align="left" balign="left"> + isTerminated() : boolean </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> # move(duration : double) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Entity) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Ship) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Border) </td></tr>
<tr><td align="left" balign="left"> + turn(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> # bounce(that : Entity) </td></tr>
<tr><td align="left" balign="left"> + overlapsWith(e : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + distanceTo(e : Entity) : double </td></tr>
<tr><td align="left" balign="left"> + distanceTo(p : Position) : double </td></tr>
<tr><td align="left" balign="left"> + distanceBetween(other : Entity, duration : double) : double </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../entity/Entity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.geometry.Angle
	c7440 [label=<<table title="world.physics.geometry.Angle" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../geometry/Angle.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Angle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - angle : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Angle(angle : double) </td></tr>
<tr><td align="left" balign="left"> + Angle() </td></tr>
<tr><td align="left" balign="left"> + get() : double </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : double) : boolean </td></tr>
<tr><td align="left" balign="left"> + set(angle : double) </td></tr>
<tr><td align="left" balign="left"> + getSin() : double </td></tr>
<tr><td align="left" balign="left"> + getCos() : double </td></tr>
<tr><td align="left" balign="left"> + add(a : Angle) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../geometry/Angle.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.vector.Direction
	c7443 [label=<<table title="world.physics.vector.Direction" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Direction.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Direction </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - angle : Angle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Direction(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + Direction(angle : double) </td></tr>
<tr><td align="left" balign="left"> + Direction() </td></tr>
<tr><td align="left" balign="left"> + getAngle() : Angle </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : Angle) : boolean </td></tr>
<tr><td align="left" balign="left"> + setAngle(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + _X() : double </td></tr>
<tr><td align="left" balign="left"> + _Y() : double </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Direction.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.vector.Vector
	c7447 [label=<<table title="world.physics.vector.Vector" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Vector.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vector </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # components : double[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vector(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vector(v : Vector) </td></tr>
<tr><td align="left" balign="left"> + Vector() </td></tr>
<tr><td align="left" balign="left"> + _X() : double </td></tr>
<tr><td align="left" balign="left"> + setX(x : double) </td></tr>
<tr><td align="left" balign="left"> + _Y() : double </td></tr>
<tr><td align="left" balign="left"> + setY(y : double) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsComponent(x : double) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSum(v : Vector) : Vector </td></tr>
<tr><td align="left" balign="left"> + getDifference(v : Vector) : Vector </td></tr>
<tr><td align="left" balign="left"> + getScaledBy(factor : double) : Vector </td></tr>
<tr><td align="left" balign="left"> + dotProduct(v : Vector) : double </td></tr>
<tr><td align="left" balign="left"> + getMagnitude() : double </td></tr>
<tr><td align="left" balign="left"> + getUnitVectorInDirection() : Vector </td></tr>
<tr><td align="left" balign="left"> + getDistanceTo(v : Vector) : double </td></tr>
<tr><td align="left" balign="left"> + getQuadrant() : Quadrant </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(o : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
		</table></td></tr>
		</table>>, URL="./Vector.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//world.physics.vector.Direction extends world.physics.vector.Vector
	c7447:p -> c7443:p [dir=back,arrowtail=empty];
	// world.entity.Entity NAVASSOC world.physics.vector.Direction
	c7429:p -> c7443:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// world.physics.vector.Direction NAVASSOC world.physics.geometry.Angle
	c7443:p -> c7440:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

