#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// world.entity.Entity
	c6550 [label=<<table title="world.entity.Entity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../entity/Entity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Entity </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # position : Position </td></tr>
<tr><td align="left" balign="left"> # velocity : Velocity </td></tr>
<tr><td align="left" balign="left"> # direction : Direction </td></tr>
<tr><td align="left" balign="left"> - shape : CircleShape </td></tr>
<tr><td align="left" balign="left"> # speedLimit : double </td></tr>
<tr><td align="left" balign="left"> - mass : Mass </td></tr>
<tr><td align="left" balign="left"> # world : World </td></tr>
<tr><td align="left" balign="left"> # isTerminated : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Entity(direction : Direction, position : Position, speedLimit : double, velocity : Velocity, shape : CircleShape, mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + Entity() </td></tr>
<tr><td align="left" balign="left"> + getPosition() : Position </td></tr>
<tr><td align="left" balign="left"> # canHaveAsPosition(position : Position) : boolean </td></tr>
<tr><td align="left" balign="left"> # setPosition(position : Position) </td></tr>
<tr><td align="left" balign="left"> + getVelocity() : Velocity </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVelocity(velocity : Velocity) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVelocity(velocity : Velocity) </td></tr>
<tr><td align="left" balign="left"> + getDirection() : Direction </td></tr>
<tr><td align="left" balign="left"> # canHaveAsDirection(direction : Direction) : boolean </td></tr>
<tr><td align="left" balign="left"> # setDirection(direction : Direction) </td></tr>
<tr><td align="left" balign="left"> + getShape() : CircleShape </td></tr>
<tr><td align="left" balign="left"> # canHaveAsShape(shape : CircleShape) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSpeedLimit() : double </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSpeedLimit(speedLimit : double) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSpeedLimit(speedLimit : double) </td></tr>
<tr><td align="left" balign="left"> + getMass() : Mass </td></tr>
<tr><td align="left" balign="left"> # canHaveAsMass(mass : Mass) : boolean </td></tr>
<tr><td align="left" balign="left"> # setMass(mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + getWorld() : World </td></tr>
<tr><td align="left" balign="left"> - canHaveAsWorld(world : World) : boolean </td></tr>
<tr><td align="left" balign="left"> + setWorld(world : World) </td></tr>
<tr><td align="left" balign="left"> + isTerminated() : boolean </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> # move(duration : double) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Entity) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Ship) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Border) </td></tr>
<tr><td align="left" balign="left"> + turn(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> # bounce(that : Entity) </td></tr>
<tr><td align="left" balign="left"> + overlapsWith(e : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + distanceTo(e : Entity) : double </td></tr>
<tr><td align="left" balign="left"> + distanceTo(p : Position) : double </td></tr>
<tr><td align="left" balign="left"> + distanceBetween(other : Entity, duration : double) : double </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../entity/Entity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.collision.Collision
	c6556 [label=<<table title="world.physics.collision.Collision" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Collision.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Collision </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # collisionPosition : Position </td></tr>
<tr><td align="left" balign="left"> # world : World </td></tr>
<tr><td align="left" balign="left"> # timeToCollision : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Collision(world : World) </td></tr>
<tr><td align="left" balign="left"> + getCollisionPosition() : Position </td></tr>
<tr><td align="left" balign="left"> + canHaveAsPosition(position : Position) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # calculateCollisionPosition() </font></td></tr>
<tr><td align="left" balign="left"> + getWorld() : World </td></tr>
<tr><td align="left" balign="left"> + canHaveAsWorld(world : World) : boolean </td></tr>
<tr><td align="left" balign="left"> + setWorld(world : World) </td></tr>
<tr><td align="left" balign="left"> + getTimeToCollision() : double </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # calculateCollisionTime() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + resolve() </font></td></tr>
<tr><td align="left" balign="left"> + getNextCollision(world : World) : Collision </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Collision.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.collision.Border
	c6557 [label=<<table title="world.physics.collision.Border" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Border.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> Border </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> BORDER_TOP </td></tr>
<tr><td align="left" balign="left"> BORDER_BOTTOM </td></tr>
<tr><td align="left" balign="left"> BORDER_RIGHT </td></tr>
<tr><td align="left" balign="left"> BORDER_LEFT </td></tr>
		</table></td></tr>
		</table>>, URL="./Border.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.collision.BorderCollision
	c6558 [label=<<table title="world.physics.collision.BorderCollision" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./BorderCollision.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BorderCollision </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - collisionBorder : Border </td></tr>
<tr><td align="left" balign="left"> - collisionEntity : Entity </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BorderCollision(world : World, entity : Entity) </td></tr>
<tr><td align="left" balign="left"> + getCollisionBorder() : Border </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCollisionBorder(collisionBorder : Border) : boolean </td></tr>
<tr><td align="left" balign="left"> + setCollisionBorder(collisionBorder : Border) </td></tr>
<tr><td align="left" balign="left"> + getCollisionEntity() : Entity </td></tr>
<tr><td align="left" balign="left"> + canHaveAsEntity(collisionEntity : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + setCollisionEntity(collisionEntity : Entity) </td></tr>
<tr><td align="left" balign="left"> + resolve() </td></tr>
<tr><td align="left" balign="left"> + getTimeToCollision() : double </td></tr>
<tr><td align="left" balign="left"> - getTimeToBorderCollision(border : Border) : double </td></tr>
<tr><td align="left" balign="left"> # calculateCollisionTime() </td></tr>
<tr><td align="left" balign="left"> # calculateCollisionPosition() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./BorderCollision.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//world.physics.collision.BorderCollision extends world.physics.collision.Collision
	c6556:p -> c6558:p [dir=back,arrowtail=empty];
	// world.physics.collision.BorderCollision NAVASSOC world.physics.collision.Border
	c6558:p -> c6557:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// world.physics.collision.BorderCollision NAVASSOC world.entity.Entity
	c6558:p -> c6550:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

