#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.IShip
	c15432 [label=<<table title="model.IShip" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../model/IShip.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> model.IShip </td></tr>
		</table></td></tr>
		</table>>, URL="../../../model/IShip.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.entity.Entity
	c15522 [label=<<table title="world.entity.Entity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Entity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> world.entity.Entity </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # position : world.physics.vector.Position </td></tr>
<tr><td align="left" balign="left"> # velocity : world.physics.vector.Velocity </td></tr>
<tr><td align="left" balign="left"> # direction : world.physics.vector.Direction </td></tr>
<tr><td align="left" balign="left"> - shape : world.physics.geometry.CircleShape </td></tr>
<tr><td align="left" balign="left"> # speedLimit : double </td></tr>
<tr><td align="left" balign="left"> - mass : world.physics.Mass </td></tr>
<tr><td align="left" balign="left"> # world : world.World </td></tr>
<tr><td align="left" balign="left"> # isTerminated : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getPosition() : world.physics.vector.Position </td></tr>
<tr><td align="left" balign="left"> # canHaveAsPosition(position : world.physics.vector.Position) : boolean </td></tr>
<tr><td align="left" balign="left"> + setPosition(position : world.physics.vector.Position) </td></tr>
<tr><td align="left" balign="left"> + getVelocity() : world.physics.vector.Velocity </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVelocity(velocity : world.physics.vector.Velocity) : boolean </td></tr>
<tr><td align="left" balign="left"> + setVelocity(velocity : world.physics.vector.Velocity) </td></tr>
<tr><td align="left" balign="left"> + getDirection() : world.physics.vector.Direction </td></tr>
<tr><td align="left" balign="left"> # canHaveAsDirection(direction : world.physics.vector.Direction) : boolean </td></tr>
<tr><td align="left" balign="left"> + setDirection(direction : world.physics.vector.Direction) </td></tr>
<tr><td align="left" balign="left"> + getShape() : world.physics.geometry.CircleShape </td></tr>
<tr><td align="left" balign="left"> # canHaveAsShape(shape : world.physics.geometry.CircleShape) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSpeedLimit() : double </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSpeedLimit(speedLimit : double) : boolean </td></tr>
<tr><td align="left" balign="left"> + setSpeedLimit(speedLimit : double) </td></tr>
<tr><td align="left" balign="left"> + getMass() : world.physics.Mass </td></tr>
<tr><td align="left" balign="left"> - canHaveAsMass(mass : world.physics.Mass) : boolean </td></tr>
<tr><td align="left" balign="left"> - setMass(mass : world.physics.Mass) </td></tr>
<tr><td align="left" balign="left"> + getWorld() : world.World </td></tr>
<tr><td align="left" balign="left"> - canHaveAsWorld(world : world.World) : boolean </td></tr>
<tr><td align="left" balign="left"> + setWorld(world : world.World) </td></tr>
<tr><td align="left" balign="left"> + isTerminated() : boolean </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + move(duration : double) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : world.entity.Entity) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : world.entity.ship.Ship) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : world.entity.Asteroid) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : world.entity.Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : world.physics.collision.Border) </td></tr>
<tr><td align="left" balign="left"> + turn(angle : world.physics.geometry.Angle) </td></tr>
<tr><td align="left" balign="left"> + bounce(that : world.entity.Entity) </td></tr>
<tr><td align="left" balign="left"> + overlapsWith(e : world.entity.Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + distanceTo(e : world.entity.Entity) : double </td></tr>
<tr><td align="left" balign="left"> + distanceTo(p : world.physics.vector.Position) : double </td></tr>
<tr><td align="left" balign="left"> + distanceBetween(other : world.entity.Entity, duration : double) : double </td></tr>
<tr><td align="left" balign="left"> + toString() : java.lang.String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : java.lang.Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Entity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.entity.ship.Ship
	c15525 [label=<<table title="world.entity.ship.Ship" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Ship.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Ship </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - minimumRadius : double </td></tr>
<tr><td align="left" balign="left"> - thruster : Thruster </td></tr>
<tr><td align="left" balign="left"> - bulletList : ArrayList&lt;Bullet&gt; </td></tr>
<tr><td align="left" balign="left"> ~ program : Program </td></tr>
<tr><td align="left" balign="left"> - thrustPerSecond : double </td></tr>
<tr><td align="left" balign="left"> - MAXIMUM_AMOUNT_OF_BULLETS : byte </td></tr>
<tr><td align="left" balign="left"> - SPEED_OF_ACTIONS : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # canHaveAsShape(shape : CircleShape) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMinimumRadius() : double </td></tr>
<tr><td align="left" balign="left"> + getThruster() : Thruster </td></tr>
<tr><td align="left" balign="left"> - canHaveAsThruster(thruster : Thruster) : boolean </td></tr>
<tr><td align="left" balign="left"> - setThruster(thruster : Thruster) </td></tr>
<tr><td align="left" balign="left"> + getBulletList() : ArrayList&lt;Bullet&gt; </td></tr>
<tr><td align="left" balign="left"> - canHaveAsBulletList(bullets : ArrayList&lt;Bullet&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - setBulletList(bullets : ArrayList&lt;Bullet&gt;) </td></tr>
<tr><td align="left" balign="left"> + getProgram() : Program </td></tr>
<tr><td align="left" balign="left"> # canHaveAsProgram(program : Program) : boolean </td></tr>
<tr><td align="left" balign="left"> + setProgram(program : Program) </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + canFire() : boolean </td></tr>
<tr><td align="left" balign="left"> + fire() </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getThrustPerSecond() : double </td></tr>
		</table></td></tr>
		</table>>, URL="./Ship.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//world.entity.ship.Ship extends world.entity.Entity
	c15522:p -> c15525:p [dir=back,arrowtail=empty];
	//world.entity.ship.Ship implements model.IShip
	c15432:p -> c15525:p [dir=back,arrowtail=empty,style=dashed];
}

