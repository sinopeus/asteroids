#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// world.entity.Entity
	c6643 [label=<<table title="world.entity.Entity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Entity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Entity </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # position : Position </td></tr>
<tr><td align="left" balign="left"> # velocity : Velocity </td></tr>
<tr><td align="left" balign="left"> # direction : Direction </td></tr>
<tr><td align="left" balign="left"> - shape : CircleShape </td></tr>
<tr><td align="left" balign="left"> # speedLimit : double </td></tr>
<tr><td align="left" balign="left"> - mass : Mass </td></tr>
<tr><td align="left" balign="left"> # world : World </td></tr>
<tr><td align="left" balign="left"> # isTerminated : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + getPosition() : Position </td></tr>
<tr><td align="left" balign="left"> # canHaveAsPosition(position : Position) : boolean </td></tr>
<tr><td align="left" balign="left"> + setPosition(position : Position) </td></tr>
<tr><td align="left" balign="left"> + getVelocity() : Velocity </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVelocity(velocity : Velocity) : boolean </td></tr>
<tr><td align="left" balign="left"> + setVelocity(velocity : Velocity) </td></tr>
<tr><td align="left" balign="left"> + getDirection() : Direction </td></tr>
<tr><td align="left" balign="left"> # canHaveAsDirection(direction : Direction) : boolean </td></tr>
<tr><td align="left" balign="left"> + setDirection(direction : Direction) </td></tr>
<tr><td align="left" balign="left"> + getShape() : CircleShape </td></tr>
<tr><td align="left" balign="left"> # canHaveAsShape(shape : CircleShape) : boolean </td></tr>
<tr><td align="left" balign="left"> + getSpeedLimit() : double </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSpeedLimit(speedLimit : double) : boolean </td></tr>
<tr><td align="left" balign="left"> + setSpeedLimit(speedLimit : double) </td></tr>
<tr><td align="left" balign="left"> + getMass() : Mass </td></tr>
<tr><td align="left" balign="left"> - canHaveAsMass(mass : Mass) : boolean </td></tr>
<tr><td align="left" balign="left"> - setMass(mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + getWorld() : World </td></tr>
<tr><td align="left" balign="left"> - canHaveAsWorld(world : World) : boolean </td></tr>
<tr><td align="left" balign="left"> + setWorld(world : World) </td></tr>
<tr><td align="left" balign="left"> + isTerminated() : boolean </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + move(duration : double) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Entity) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Ship) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Border) </td></tr>
<tr><td align="left" balign="left"> + turn(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + bounce(that : Entity) </td></tr>
<tr><td align="left" balign="left"> + overlapsWith(e : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + distanceTo(e : Entity) : double </td></tr>
<tr><td align="left" balign="left"> + distanceTo(p : Position) : double </td></tr>
<tr><td align="left" balign="left"> + distanceBetween(other : Entity, duration : double) : double </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Entity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.entity.Bullet
	c6644 [label=<<table title="world.entity.Bullet" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Bullet.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Bullet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - bounceCounter : byte </td></tr>
<tr><td align="left" balign="left"> - shooter : Ship </td></tr>
<tr><td align="left" balign="left"> - bulletRadius : double </td></tr>
<tr><td align="left" balign="left"> - bulletInitialVelocity : double </td></tr>
<tr><td align="left" balign="left"> - density : double </td></tr>
<tr><td align="left" balign="left"> + maximumBorderBounces : byte </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - getInitialPosition(ship : Ship) : Position </td></tr>
<tr><td align="left" balign="left"> + getShooter() : Ship </td></tr>
<tr><td align="left" balign="left"> - canHaveAsShooter(shooter : Ship) : boolean </td></tr>
<tr><td align="left" balign="left"> - setShooter(shooter : Ship) </td></tr>
<tr><td align="left" balign="left"> + getBounceCounter() : byte </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBounceCounter(bounceCounter : byte) : boolean </td></tr>
<tr><td align="left" balign="left"> + setBounceCounter(bounceCounter : byte) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Ship) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Border) </td></tr>
<tr><td align="left" balign="left"> + unlinkFromShooter() </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Bullet.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//world.entity.Bullet extends world.entity.Entity
	c6643:p -> c6644:p [dir=back,arrowtail=empty];
}

