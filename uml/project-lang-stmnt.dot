#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [weight=1.2, fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	splines = ortho;
	//size="16.0, 22.5";
	nodesep=1;
	ranksep=0.3;

	// EXAMPLES
	// //world.entity.Bullet extends world.entity.Entity
	// c15575:p -> c15576:p [dir=back,arrowhead=empty];

	// //world.entity.ship.Ship implements model.IShip
	// c15485:p -> c15578:p [dir=back,arrowhead=empty,style=dashed];

	// // model.programs.Program NAVASSOC world.entity.ship.Ship
	// c15492:p -> c15578:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];

	// NODES
subgraph cluster_programs {
color = blue;
label ="programs"

	// model.programs.Program
	program [label=<<table title="model.programs.Program" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../model/programs/Program.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Program </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - globalTypes : Map&lt;String, Type&gt; </td></tr>
<tr><td align="left" balign="left"> - globalValues : HashMap&lt;String, ConstantExpression&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ statement : Statement </td></tr>
<tr><td align="left" balign="left"> - owner : Ship </td></tr>
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Program(globals : Map&lt;String, Type&gt;, statement : Statement) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + executeUntilAfterNextAction() </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../../model/programs/Program.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		program:p -> programpart:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, arrowtail=open];
	statement:p -> program:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, arrowtail=open];

subgraph cluster_language {
color = blue;
label ="language"
	programpart [label=<<table title="model.programs.parsing.language.ProgramPart" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../ProgramPart.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ProgramPart </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # parentProgram : Program </td></tr>
<tr><td align="left" balign="left"> ~ line : int </td></tr>
<tr><td align="left" balign="left"> ~ column : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ProgramPart(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isTypeSafe() : boolean </font></td></tr>
		</table></td></tr>
		</table>>, URL="../ProgramPart.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.Expression
	expression [label=<<table title="model.programs.parsing.language.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Expression(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Expression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

subgraph cluster_statement {
label = "statement";
color = blue;
	// model.programs.parsing.language.statement.Assignment
	assignment [label=<<table title="model.programs.parsing.language.statement.Assignment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Assignment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Assignment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ variable : Variable </td></tr>
<tr><td align="left" balign="left"> ~ value : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Assignment(line : int, column : int, variable : Variable, value : Expression) </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Assignment.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.Print
	print [label=<<table title="model.programs.parsing.language.statement.Print" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Print.html">

	<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Print </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - textExpression : Expression </td></tr>
<tr><td align="left" balign="left"> - text : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Print(line : int, column : int, textExpression : Expression) </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Print.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.While
	while [label=<<table title="model.programs.parsing.language.statement.While" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/While.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> While </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> - body : Statement </td></tr>
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + While(line : int, column : int, condition : Expression, body : Statement) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/While.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.If
	if [label=<<table title="model.programs.parsing.language.statement.If" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/If.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> If </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> ~ then : Statement </td></tr>
<tr><td align="left" balign="left"> ~ otherwise : Statement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + If(line : int, column : int, condition : Expression, then : Statement, otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> - execute(statement : Statement) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/If.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Turn
	turn [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/action/Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/action/Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	
	// model.programs.parsing.language.statement.Statement
	statement [label=<<table title="model.programs.parsing.language.statement.Statement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Statement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Statement </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Statement(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + containsAction() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Statement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		subgraph cluster_action {
		label = "action";
		color = blue;
	// model.programs.parsing.language.statement.action.Action
	action [label=<<table title="model.programs.parsing.language.statement.action.Action" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Action.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Action </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Action(line : int, column : int) </td></tr>
		</table></td></tr>
		</table>>, URL="./Action.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Fire
	fire [label=<<table title="model.programs.parsing.language.statement.action.Fire" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Fire.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Fire </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Fire(line : int, column : int) </td></tr>
		</table></td></tr>
		</table>>, URL="./Fire.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.ThrustOn
	thruston [label=<<table title="model.programs.parsing.language.statement.action.ThrustOn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThrustOn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThrustOn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ThrustOn(line : int, column : int) </td></tr>
		</table></td></tr>
		</table>>, URL="./ThrustOn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Skip
	skip [label=<<table title="model.programs.parsing.language.statement.action.Skip" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Skip.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Skip </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Skip(line : int, column : int) </td></tr>
		</table></td></tr>
		</table>>, URL="./Skip.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.ThrustOff
	thrustoff [label=<<table title="model.programs.parsing.language.statement.action.ThrustOff" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThrustOff.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThrustOff </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ThrustOff(line : int, column : int) </td></tr>
		</table></td></tr>
		</table>>, URL="./ThrustOff.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// model.programs.parsing.language.statement.action.Turn
	turn [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
		</table></td></tr>
		</table>>, URL="./Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

	// model.programs.parsing.language.statement.Sequence
	sequence [label=<<table title="model.programs.parsing.language.statement.Sequence" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sequence.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sequence </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - sequence : List&lt;Statement&gt; </td></tr>
<tr><td align="left" balign="left"> - selectedIndex : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sequence(line : int, column : int, sequence : List&lt;Statement&gt;) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # getCurrentStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
		</table></td></tr>
		</table>>, URL="./Sequence.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// model.programs.parsing.language.statement.ForEach
	foreach [label=<<table title="model.programs.parsing.language.statement.ForEach" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ForEach.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ForEach </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - type : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> ~ variableName : String </td></tr>
<tr><td align="left" balign="left"> ~ body : Statement </td></tr>
<tr><td align="left" balign="left"> - selection : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> - currentIndex : int </td></tr>
<tr><td align="left" balign="left"> - AtStartOfIteration : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ForEach(line : int, column : int, type : ProgramFactory.ForeachType, variableName : String, body : Statement) </td></tr>
<tr><td align="left" balign="left"> # calculateSelection() </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # isAtStartOfIteration() : boolean </td></tr>
<tr><td align="left" balign="left"> # startIteration() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
		</table></td></tr>
		</table>>, URL="./ForEach.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		}

	//Program


	//ProgramPart

	//Statement
	statement:p -> programpart:p [arrowhead=empty];

	//Action
	action:p -> statement:p [arrowhead=empty];
	//Fire
	fire:p -> action:p [arrowhead=empty];
	//Skip
	skip:p -> action:p [arrowhead=empty];
	//ThrustOn
	thruston:p -> action:p [arrowhead=empty];
	//ThrustOff
	thrustoff:p -> action:p [arrowhead=empty];
	//Turn
	turn:p -> action:p [arrowhead=empty];

	//If
	if:p -> statement:p [arrowhead=empty];

	//ForEach
	foreach:p -> statement:p [arrowhead=empty];

	//Sequence
	sequence:p -> statement:p [arrowhead=empty];

	//Assignment
	assignment:p -> statement:p [arrowhead=empty];

	//While
	while:p -> statement:p [arrowhead=empty];

	//Print
	print:p -> statement:p [arrowhead=empty];

	//Expression
	expression:p -> programpart:p [arrowhead=empty];

}
	}

	// ship:p -> program:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open,  dir="both"];
}