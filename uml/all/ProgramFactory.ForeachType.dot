#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.ProgramFactory.ForeachType
	c14242 [label=<<table title="model.programs.parsing.ProgramFactory.ForeachType" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./ProgramFactory.ForeachType.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> ForeachType </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> SHIP </td></tr>
<tr><td align="left" balign="left"> ASTEROID </td></tr>
<tr><td align="left" balign="left"> BULLET </td></tr>
<tr><td align="left" balign="left"> ANY </td></tr>
		</table></td></tr>
		</table>>, URL="./ProgramFactory.ForeachType.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.ForEach
	c14308 [label=<<table title="model.programs.parsing.language.statement.ForEach" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./language/statement/ForEach.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ForEach </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - type : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> ~ variableName : String </td></tr>
<tr><td align="left" balign="left"> ~ body : Statement </td></tr>
<tr><td align="left" balign="left"> - selection : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> - currentIndex : int </td></tr>
<tr><td align="left" balign="left"> - AtStartOfIteration : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ForEach(line : int, column : int, type : ProgramFactory.ForeachType, variableName : String, body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getType() : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> # canHaveAsType(type : ProgramFactory.ForeachType) : boolean </td></tr>
<tr><td align="left" balign="left"> # setType(type : ProgramFactory.ForeachType) </td></tr>
<tr><td align="left" balign="left"> # getVariableName() : String </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVariable(variableName : String) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVariableName(variableName : String) </td></tr>
<tr><td align="left" balign="left"> # getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getSelection() : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSelection(selection : ArrayList&lt;EntityLiteral&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # calculateSelection() </td></tr>
<tr><td align="left" balign="left"> # getCurrentIndex() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCurrentIndex(selectedIndex : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSelectedIndex(selectedIndex : int) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # isAtStartOfIteration() : boolean </td></tr>
<tr><td align="left" balign="left"> # startIteration() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./language/statement/ForEach.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.ForEach NAVASSOC model.programs.parsing.ProgramFactory.ForeachType
	c14308:p -> c14242:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

