#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.expression.Expression
	c17773 [label=<<table title="model.programs.parsing.language.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../expression/Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Expression(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + evaluate() : ConstantExpression&lt;?&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getType() : Type </font></td></tr>
		</table></td></tr>
		</table>>, URL="../expression/Expression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Statement
	c17812 [label=<<table title="model.programs.parsing.language.statement.Statement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Statement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Statement </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Statement(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + containsAction() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Statement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.While
	c17816 [label=<<table title="model.programs.parsing.language.statement.While" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./While.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> While </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> - body : Statement </td></tr>
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + While(line : int, column : int, condition : Expression, body : Statement) </td></tr>
<tr><td align="left" balign="left"> + getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> + getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./While.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.statement.While extends model.programs.parsing.language.statement.Statement
	c17812:p -> c17816:p [dir=back,arrowtail=empty];
	// model.programs.parsing.language.statement.While NAVASSOC model.programs.parsing.language.expression.Expression
	c17816:p -> c17773:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.While NAVASSOC model.programs.parsing.language.statement.Statement
	c17816:p -> c17812:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

