#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.expression.first_order.Sine
	c10019 [label=<<table title="model.programs.parsing.language.expression.first_order.Sine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Sine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.Cosine
	c10023 [label=<<table title="model.programs.parsing.language.expression.first_order.Cosine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Cosine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Cosine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Cosine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Cosine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c10025 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ argument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpression(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setArgument(argument : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c10026 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./FirstOrderExpressionOfNumberToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfNumberToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfNumberToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfNumberToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.SquareRoot
	c10027 [label=<<table title="model.programs.parsing.language.expression.first_order.SquareRoot" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SquareRoot.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SquareRoot </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SquareRoot(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SquareRoot.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.expression.first_order.Sine extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c10026:p -> c10019:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.Cosine extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c10026:p -> c10023:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber extends model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c10025:p -> c10026:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.SquareRoot extends model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	c10026:p -> c10027:p [dir=back,arrowtail=empty];
}

