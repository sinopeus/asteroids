#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.Program
	c13860 [label=<<table title="model.programs.Program" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Program.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Program </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - globalTypes : Map&lt;String, Type&gt; </td></tr>
<tr><td align="left" balign="left"> - globalValues : HashMap&lt;String, ConstantExpression&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ statement : Statement </td></tr>
<tr><td align="left" balign="left"> - owner : Ship </td></tr>
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Program(globals : Map&lt;String, Type&gt;, statement : Statement) </td></tr>
<tr><td align="left" balign="left"> + getGlobalTypes() : Map&lt;String, Type&gt; </td></tr>
<tr><td align="left" balign="left"> # setGlobalTypes(globalTypes : Map&lt;String, Type&gt;) </td></tr>
<tr><td align="left" balign="left"> + getGlobalValues() : HashMap&lt;String, ConstantExpression&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> # setGlobalValues(globalTypes : Map&lt;String, Type&gt;) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsGlobals(globals : Map&lt;String, Type&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # getStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsStatement(statement : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setStatement(statement : Statement) </td></tr>
<tr><td align="left" balign="left"> + getOwner() : Ship </td></tr>
<tr><td align="left" balign="left"> # canHaveAsOwner(owner : Ship) : boolean </td></tr>
<tr><td align="left" balign="left"> + setOwner(owner : Ship) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + getVariableNamed(name : String) : ConstantExpression&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + setVariableValue(name : String, value : ConstantExpression&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + executeUntilAfterNextAction() </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Program.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.ProgramPart
	c13886 [label=<<table title="model.programs.parsing.language.ProgramPart" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./parsing/language/ProgramPart.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ProgramPart </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # parentProgram : Program </td></tr>
<tr><td align="left" balign="left"> ~ line : int </td></tr>
<tr><td align="left" balign="left"> ~ column : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ProgramPart(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + getParentProgram() : Program </td></tr>
<tr><td align="left" balign="left"> # canHaveAsParentProgram(program : Program) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + getLine() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsLine(line : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setLine(line : int) </td></tr>
<tr><td align="left" balign="left"> + getColumn() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsColumn(column : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setColumn(column : int) </td></tr>
<tr><td align="left" balign="left"> + getOwnerShip() : Ship </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isTypeSafe() : boolean </font></td></tr>
		</table></td></tr>
		</table>>, URL="./parsing/language/ProgramPart.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Statement
	c13928 [label=<<table title="model.programs.parsing.language.statement.Statement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./parsing/language/statement/Statement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Statement </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Statement(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + containsAction() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./parsing/language/statement/Statement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.entity.ship.Ship
	c13946 [label=<<table title="world.entity.ship.Ship" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../world/entity/ship/Ship.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Ship </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - minimumRadius : double </td></tr>
<tr><td align="left" balign="left"> - thruster : Thruster </td></tr>
<tr><td align="left" balign="left"> - bulletList : ArrayList&lt;Bullet&gt; </td></tr>
<tr><td align="left" balign="left"> ~ program : Program </td></tr>
<tr><td align="left" balign="left"> - thrustPerSecond : double </td></tr>
<tr><td align="left" balign="left"> - MAXIMUM_AMOUNT_OF_BULLETS : byte </td></tr>
<tr><td align="left" balign="left"> - SPEED_OF_ACTIONS : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Ship(direction : Direction, position : Position, speedLimit : double, velocity : Velocity, shape : CircleShape, mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + Ship() </td></tr>
<tr><td align="left" balign="left"> # canHaveAsShape(shape : CircleShape) : boolean </td></tr>
<tr><td align="left" balign="left"> + getMinimumRadius() : double </td></tr>
<tr><td align="left" balign="left"> + getThruster() : Thruster </td></tr>
<tr><td align="left" balign="left"> - canHaveAsThruster(thruster : Thruster) : boolean </td></tr>
<tr><td align="left" balign="left"> - setThruster(thruster : Thruster) </td></tr>
<tr><td align="left" balign="left"> + getBulletList() : ArrayList&lt;Bullet&gt; </td></tr>
<tr><td align="left" balign="left"> - canHaveAsBulletList(bullets : ArrayList&lt;Bullet&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> - setBulletList(bullets : ArrayList&lt;Bullet&gt;) </td></tr>
<tr><td align="left" balign="left"> + getProgram() : Program </td></tr>
<tr><td align="left" balign="left"> # canHaveAsProgram(program : Program) : boolean </td></tr>
<tr><td align="left" balign="left"> + setProgram(program : Program) </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + canFire() : boolean </td></tr>
<tr><td align="left" balign="left"> + fire() </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + getThrustPerSecond() : double </td></tr>
		</table></td></tr>
		</table>>, URL="../../world/entity/ship/Ship.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.statement.Statement extends model.programs.parsing.language.ProgramPart
	c13886:p -> c13928:p [dir=back,arrowtail=empty];
	// model.programs.Program NAVASSOC java.util.Map<K, V>
	c13860:p -> c13962:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.Program NAVASSOC java.util.HashMap<K, V>
	c13860:p -> c13963:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.Program NAVASSOC model.programs.parsing.language.statement.Statement
	c13860:p -> c13928:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.Program NAVASSOC world.entity.ship.Ship
	c13860:p -> c13946:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.ProgramPart NAVASSOC model.programs.Program
	c13886:p -> c13860:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// world.entity.ship.Ship NAVASSOC model.programs.Program
	c13946:p -> c13860:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// java.util.HashMap<K, V>
	c13963 [label=<<table title="java.util.HashMap" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/HashMap.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> HashMap&lt;K, V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ DEFAULT_INITIAL_CAPACITY : int </td></tr>
<tr><td align="left" balign="left"> ~ MAXIMUM_CAPACITY : int </td></tr>
<tr><td align="left" balign="left"> ~ DEFAULT_LOAD_FACTOR : float </td></tr>
<tr><td align="left" balign="left"> ~ table : HashMap.Entry&lt;K, V&gt;[] </td></tr>
<tr><td align="left" balign="left"> ~ size : int </td></tr>
<tr><td align="left" balign="left"> ~ threshold : int </td></tr>
<tr><td align="left" balign="left"> ~ loadFactor : float </td></tr>
<tr><td align="left" balign="left"> ~ modCount : int </td></tr>
<tr><td align="left" balign="left"> ~ ALTERNATIVE_HASHING_THRESHOLD_DEFAULT : int </td></tr>
<tr><td align="left" balign="left"> ~ useAltHashing : boolean </td></tr>
<tr><td align="left" balign="left"> ~ hashSeed : int </td></tr>
<tr><td align="left" balign="left"> - entrySet : Set&lt;Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + HashMap(arg0 : int, arg1 : float) </td></tr>
<tr><td align="left" balign="left"> + HashMap(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> + HashMap() </td></tr>
<tr><td align="left" balign="left"> + HashMap(arg0 : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> ~ init() </td></tr>
<tr><td align="left" balign="left"> ~ hash(arg0 : Object) : int </td></tr>
<tr><td align="left" balign="left"> ~ indexFor(arg0 : int, arg1 : int) : int </td></tr>
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + get(arg0 : Object) : V </td></tr>
<tr><td align="left" balign="left"> - getForNullKey() : V </td></tr>
<tr><td align="left" balign="left"> + containsKey(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> ~ getEntry(arg0 : Object) : HashMap.Entry&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> + put(arg0 : K, arg1 : V) : V </td></tr>
<tr><td align="left" balign="left"> - putForNullKey(arg0 : V) : V </td></tr>
<tr><td align="left" balign="left"> - putForCreate(arg0 : K, arg1 : V) </td></tr>
<tr><td align="left" balign="left"> - putAllForCreate(arg0 : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> ~ resize(arg0 : int) </td></tr>
<tr><td align="left" balign="left"> ~ transfer(arg0 : HashMap.Entry&lt;&gt;[], arg1 : boolean) </td></tr>
<tr><td align="left" balign="left"> + putAll(arg0 : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : Object) : V </td></tr>
<tr><td align="left" balign="left"> ~ removeEntryForKey(arg0 : Object) : HashMap.Entry&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> ~ removeMapping(arg0 : Object) : HashMap.Entry&lt;K, V&gt; </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + containsValue(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> - containsNullValue() : boolean </td></tr>
<tr><td align="left" balign="left"> + clone() : Object </td></tr>
<tr><td align="left" balign="left"> ~ addEntry(arg0 : int, arg1 : K, arg2 : V, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> ~ createEntry(arg0 : int, arg1 : K, arg2 : V, arg3 : int) </td></tr>
<tr><td align="left" balign="left"> ~ newKeyIterator() : Iterator&lt;K&gt; </td></tr>
<tr><td align="left" balign="left"> ~ newValueIterator() : Iterator&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> ~ newEntryIterator() : Iterator&lt;Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + keySet() : Set&lt;K&gt; </td></tr>
<tr><td align="left" balign="left"> + values() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + entrySet() : Set&lt;Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - entrySet0() : Set&lt;Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> - writeObject(arg0 : ObjectOutputStream) </td></tr>
<tr><td align="left" balign="left"> - readObject(arg0 : ObjectInputStream) </td></tr>
<tr><td align="left" balign="left"> ~ capacity() : int </td></tr>
<tr><td align="left" balign="left"> ~ loadFactor() : float </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/util/HashMap.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.util.Map<K, V>
	c13962 [label=<<table title="java.util.Map" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Map&lt;K, V&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + size() : int </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsKey(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsValue(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + get(arg0 : Object) : V </td></tr>
<tr><td align="left" balign="left"> + put(arg0 : K, arg1 : V) : V </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : Object) : V </td></tr>
<tr><td align="left" balign="left"> + putAll(arg0 : Map&lt;?, ?&gt;) </td></tr>
<tr><td align="left" balign="left"> + clear() </td></tr>
<tr><td align="left" balign="left"> + keySet() : Set&lt;K&gt; </td></tr>
<tr><td align="left" balign="left"> + values() : Collection&lt;V&gt; </td></tr>
<tr><td align="left" balign="left"> + entrySet() : Set&lt;Map.Entry&lt;K, V&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

