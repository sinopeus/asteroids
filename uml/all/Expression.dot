#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// model.programs.parsing.language.ProgramPart
	c8499 [label=<<table title="model.programs.parsing.language.ProgramPart" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../ProgramPart.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ProgramPart </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # parentProgram : Program </td></tr>
<tr><td align="left" balign="left"> ~ line : int </td></tr>
<tr><td align="left" balign="left"> ~ column : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ProgramPart(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + getParentProgram() : Program </td></tr>
<tr><td align="left" balign="left"> # canHaveAsParentProgram(program : Program) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + getLine() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsLine(line : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setLine(line : int) </td></tr>
<tr><td align="left" balign="left"> + getColumn() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsColumn(column : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setColumn(column : int) </td></tr>
<tr><td align="left" balign="left"> + getOwnerShip() : Ship </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isTypeSafe() : boolean </font></td></tr>
		</table></td></tr>
		</table>>, URL="../ProgramPart.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.Variable
	c8501 [label=<<table title="model.programs.parsing.language.expression.Variable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Variable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Variable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ name : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Variable(line : int, column : int, name : String) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> # setName(name : String) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsName(name : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Variable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.Expression
	c8502 [label=<<table title="model.programs.parsing.language.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Expression(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + evaluate() : ConstantExpression&lt;?&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getType() : Type </font></td></tr>
		</table></td></tr>
		</table>>, URL="./Expression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.constant.ConstantExpression<T>
	c8503 [label=<<table title="model.programs.parsing.language.expression.constant.ConstantExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./constant/ConstantExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ConstantExpression&lt;T&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # value : T </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ConstantExpression(line : int, column : int, value : T) </td></tr>
<tr><td align="left" balign="left"> + getValue() : T </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : T) : boolean </td></tr>
<tr><td align="left" balign="left"> # setValue(value : T) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./constant/ConstantExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpression
	c8519 [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./first_order/FirstOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ argument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpression(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setArgument(argument : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./first_order/FirstOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpression
	c8530 [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./second_order/SecondOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ firstArgument : Expression </td></tr>
<tr><td align="left" balign="left"> ~ secondArgument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpression(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getFirstArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setFirstArgument(firstArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getSecondArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setSecondArgument(secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./second_order/SecondOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Assignment
	c8543 [label=<<table title="model.programs.parsing.language.statement.Assignment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Assignment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Assignment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ variable : Variable </td></tr>
<tr><td align="left" balign="left"> ~ value : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Assignment(line : int, column : int, variable : Variable, value : Expression) </td></tr>
<tr><td align="left" balign="left"> # getVariable() : Variable </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVariable(variable : Variable) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVariable(variable : Variable) </td></tr>
<tr><td align="left" balign="left"> # getValue() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setValue(value : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Assignment.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.Print
	c8544 [label=<<table title="model.programs.parsing.language.statement.Print" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Print.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Print </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - textExpression : Expression </td></tr>
<tr><td align="left" balign="left"> - text : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Print(line : int, column : int, textExpression : Expression) </td></tr>
<tr><td align="left" balign="left"> # getTextExpression() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsTextExpression(textExpression : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setTextExpression(textExpression : Expression) </td></tr>
<tr><td align="left" balign="left"> # getText() : String </td></tr>
<tr><td align="left" balign="left"> # canHaveAsText(text : String) : boolean </td></tr>
<tr><td align="left" balign="left"> # setText(text : String) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Print.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.While
	c8545 [label=<<table title="model.programs.parsing.language.statement.While" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/While.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> While </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> - body : Statement </td></tr>
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + While(line : int, column : int, condition : Expression, body : Statement) </td></tr>
<tr><td align="left" balign="left"> + getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> + getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/While.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.If
	c8546 [label=<<table title="model.programs.parsing.language.statement.If" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/If.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> If </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> ~ then : Statement </td></tr>
<tr><td align="left" balign="left"> ~ otherwise : Statement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + If(line : int, column : int, condition : Expression, then : Statement, otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> # getThenStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsThenStatement(then : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setThenStatement(then : Statement) </td></tr>
<tr><td align="left" balign="left"> # getOtherwiseStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsOtherwiseStatement(otherwise : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setOtherwiseStatement(otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> - execute(statement : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/If.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.statement.action.Turn
	c8553 [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/action/Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
<tr><td align="left" balign="left"> # getAngle() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setAngle(angle : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/action/Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//model.programs.parsing.language.expression.Variable extends model.programs.parsing.language.expression.Expression
	c8502:p -> c8501:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.Expression extends model.programs.parsing.language.ProgramPart
	c8499:p -> c8502:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.constant.ConstantExpression<T> extends model.programs.parsing.language.expression.Expression
	c8502:p -> c8503:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.first_order.FirstOrderExpression extends model.programs.parsing.language.expression.Expression
	c8502:p -> c8519:p [dir=back,arrowtail=empty];
	//model.programs.parsing.language.expression.second_order.SecondOrderExpression extends model.programs.parsing.language.expression.Expression
	c8502:p -> c8530:p [dir=back,arrowtail=empty];
	// model.programs.parsing.language.expression.first_order.FirstOrderExpression NAVASSOC model.programs.parsing.language.expression.Expression
	c8519:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpression NAVASSOC model.programs.parsing.language.expression.Expression
	c8530:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.expression.second_order.SecondOrderExpression NAVASSOC model.programs.parsing.language.expression.Expression
	c8530:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.Assignment NAVASSOC model.programs.parsing.language.expression.Variable
	c8543:p -> c8501:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.Assignment NAVASSOC model.programs.parsing.language.expression.Expression
	c8543:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.Print NAVASSOC model.programs.parsing.language.expression.Expression
	c8544:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.While NAVASSOC model.programs.parsing.language.expression.Expression
	c8545:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.If NAVASSOC model.programs.parsing.language.expression.Expression
	c8546:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// model.programs.parsing.language.statement.action.Turn NAVASSOC model.programs.parsing.language.expression.Expression
	c8553:p -> c8502:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
}

