#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;

	// EXAMPLES
	// //world.entity.Bullet extends world.entity.Entity
	// c15575:p -> c15576:p [dir=back,arrowtail=empty];

	// //world.entity.ship.Ship implements model.IShip
	// c15485:p -> c15578:p [dir=back,arrowtail=empty,style=dashed];

	// // model.programs.Program NAVASSOC world.entity.ship.Ship
	// c15492:p -> c15578:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];

	// NODES

	// model.programs.Program
	program [label=<<table title="model.programs.Program" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../model/programs/Program.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Program </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - globalTypes : Map&lt;String, Type&gt; </td></tr>
<tr><td align="left" balign="left"> - globalValues : HashMap&lt;String, ConstantExpression&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ statement : Statement </td></tr>
<tr><td align="left" balign="left"> - owner : Ship </td></tr>
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Program(globals : Map&lt;String, Type&gt;, statement : Statement) </td></tr>
<tr><td align="left" balign="left"> + getGlobalTypes() : Map&lt;String, Type&gt; </td></tr>
<tr><td align="left" balign="left"> # setGlobalTypes(globalTypes : Map&lt;String, Type&gt;) </td></tr>
<tr><td align="left" balign="left"> + getGlobalValues() : HashMap&lt;String, ConstantExpression&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> # setGlobalValues(globalTypes : Map&lt;String, Type&gt;) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsGlobals(globals : Map&lt;String, Type&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # getStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsStatement(statement : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setStatement(statement : Statement) </td></tr>
<tr><td align="left" balign="left"> + getOwner() : Ship </td></tr>
<tr><td align="left" balign="left"> # canHaveAsOwner(owner : Ship) : boolean </td></tr>
<tr><td align="left" balign="left"> + setOwner(owner : Ship) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + getVariableNamed(name : String) : ConstantExpression&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + setVariableValue(name : String, value : ConstantExpression&lt;?&gt;) </td></tr>
<tr><td align="left" balign="left"> + executeUntilAfterNextAction() </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../../../model/programs/Program.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	programpart [label=<<table title="model.programs.parsing.language.ProgramPart" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../ProgramPart.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ProgramPart </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # parentProgram : Program </td></tr>
<tr><td align="left" balign="left"> ~ line : int </td></tr>
<tr><td align="left" balign="left"> ~ column : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ProgramPart(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + getParentProgram() : Program </td></tr>
<tr><td align="left" balign="left"> # canHaveAsParentProgram(program : Program) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + getLine() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsLine(line : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setLine(line : int) </td></tr>
<tr><td align="left" balign="left"> + getColumn() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsColumn(column : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setColumn(column : int) </td></tr>
<tr><td align="left" balign="left"> + getOwnerShip() : Ship </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isTypeSafe() : boolean </font></td></tr>
		</table></td></tr>
		</table>>, URL="../ProgramPart.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.Variable
	variable [label=<<table title="model.programs.parsing.language.expression.Variable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Variable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Variable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ name : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Variable(line : int, column : int, name : String) </td></tr>
<tr><td align="left" balign="left"> + getName() : String </td></tr>
<tr><td align="left" balign="left"> # setName(name : String) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsName(name : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Variable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.Expression
	expression [label=<<table title="model.programs.parsing.language.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Expression(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + evaluate() : ConstantExpression&lt;?&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getType() : Type </font></td></tr>
		</table></td></tr>
		</table>>, URL="./Expression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.ConstantExpression<T>
	constantexpression [label=<<table title="model.programs.parsing.language.expression.constant.ConstantExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./constant/ConstantExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ConstantExpression&lt;T&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # value : T </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ConstantExpression(line : int, column : int, value : T) </td></tr>
<tr><td align="left" balign="left"> + getValue() : T </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : T) : boolean </td></tr>
<tr><td align="left" balign="left"> # setValue(value : T) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;T&gt; </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
<tr><td align="left" balign="left"> + hashCode() : int </td></tr>
<tr><td align="left" balign="left"> + equals(obj : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./constant/ConstantExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.FirstOrderExpression
	firstorderexpression [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./first_order/FirstOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ argument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpression(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setArgument(argument : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./first_order/FirstOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.SecondOrderExpression
	secondorderexpression [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./second_order/SecondOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ firstArgument : Expression </td></tr>
<tr><td align="left" balign="left"> ~ secondArgument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpression(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getFirstArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setFirstArgument(firstArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getSecondArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # setSecondArgument(secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./second_order/SecondOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.Assignment
	assignment [label=<<table title="model.programs.parsing.language.statement.Assignment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Assignment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Assignment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ variable : Variable </td></tr>
<tr><td align="left" balign="left"> ~ value : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Assignment(line : int, column : int, variable : Variable, value : Expression) </td></tr>
<tr><td align="left" balign="left"> # getVariable() : Variable </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVariable(variable : Variable) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVariable(variable : Variable) </td></tr>
<tr><td align="left" balign="left"> # getValue() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setValue(value : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Assignment.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.Print
	print [label=<<table title="model.programs.parsing.language.statement.Print" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Print.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Print </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - textExpression : Expression </td></tr>
<tr><td align="left" balign="left"> - text : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Print(line : int, column : int, textExpression : Expression) </td></tr>
<tr><td align="left" balign="left"> # getTextExpression() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsTextExpression(textExpression : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setTextExpression(textExpression : Expression) </td></tr>
<tr><td align="left" balign="left"> # getText() : String </td></tr>
<tr><td align="left" balign="left"> # canHaveAsText(text : String) : boolean </td></tr>
<tr><td align="left" balign="left"> # setText(text : String) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Print.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.While
	while [label=<<table title="model.programs.parsing.language.statement.While" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/While.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> While </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> - body : Statement </td></tr>
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + While(line : int, column : int, condition : Expression, body : Statement) </td></tr>
<tr><td align="left" balign="left"> + getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> + getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/While.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.If
	if [label=<<table title="model.programs.parsing.language.statement.If" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/If.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> If </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> ~ then : Statement </td></tr>
<tr><td align="left" balign="left"> ~ otherwise : Statement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + If(line : int, column : int, condition : Expression, then : Statement, otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> # getResultOfCondition() : boolean </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # getCondition() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCondition(condition : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setCondition(condition : Expression) </td></tr>
<tr><td align="left" balign="left"> # getThenStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsThenStatement(then : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setThenStatement(then : Statement) </td></tr>
<tr><td align="left" balign="left"> # getOtherwiseStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsOtherwiseStatement(otherwise : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setOtherwiseStatement(otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> - execute(statement : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/If.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Turn
	turn [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/action/Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
<tr><td align="left" balign="left"> # getAngle() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setAngle(angle : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/action/Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	
	// model.programs.parsing.language.statement.Statement
	statement [label=<<table title="model.programs.parsing.language.statement.Statement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Statement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Statement </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Statement(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + containsAction() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Statement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Action
	action [label=<<table title="model.programs.parsing.language.statement.action.Action" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Action.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Action </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Action(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Action.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Fire
	fire [label=<<table title="model.programs.parsing.language.statement.action.Fire" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Fire.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Fire </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Fire(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Fire.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.ThrustOn
	thruston [label=<<table title="model.programs.parsing.language.statement.action.ThrustOn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThrustOn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThrustOn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ThrustOn(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./ThrustOn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Skip
	skip [label=<<table title="model.programs.parsing.language.statement.action.Skip" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Skip.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Skip </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Skip(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Skip.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.ThrustOff
	thrustoff [label=<<table title="model.programs.parsing.language.statement.action.ThrustOff" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThrustOff.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThrustOff </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ThrustOff(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./ThrustOff.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Turn
	turn [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
<tr><td align="left" balign="left"> # getAngle() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setAngle(angle : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.Sequence
	sequence [label=<<table title="model.programs.parsing.language.statement.Sequence" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sequence.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sequence </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - sequence : List&lt;Statement&gt; </td></tr>
<tr><td align="left" balign="left"> - selectedIndex : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sequence(line : int, column : int, sequence : List&lt;Statement&gt;) </td></tr>
<tr><td align="left" balign="left"> # getSequence() : List&lt;Statement&gt; </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSequence(sequence : List&lt;Statement&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSequence(sequence : List&lt;Statement&gt;) </td></tr>
<tr><td align="left" balign="left"> # getSelectedIndex() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSelectedIndex(selectedIndex : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSelectedIndex(selectedIndex : int) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # getCurrentStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Sequence.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// model.programs.parsing.language.statement.ForEach
	foreach [label=<<table title="model.programs.parsing.language.statement.ForEach" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ForEach.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ForEach </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - type : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> ~ variableName : String </td></tr>
<tr><td align="left" balign="left"> ~ body : Statement </td></tr>
<tr><td align="left" balign="left"> - selection : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> - currentIndex : int </td></tr>
<tr><td align="left" balign="left"> - AtStartOfIteration : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ForEach(line : int, column : int, type : ProgramFactory.ForeachType, variableName : String, body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getType() : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> # canHaveAsType(type : ProgramFactory.ForeachType) : boolean </td></tr>
<tr><td align="left" balign="left"> # setType(type : ProgramFactory.ForeachType) </td></tr>
<tr><td align="left" balign="left"> # getVariableName() : String </td></tr>
<tr><td align="left" balign="left"> # canHaveAsVariable(variableName : String) : boolean </td></tr>
<tr><td align="left" balign="left"> # setVariableName(variableName : String) </td></tr>
<tr><td align="left" balign="left"> # getBody() : Statement </td></tr>
<tr><td align="left" balign="left"> # canHaveAsBody(body : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> # setBody(body : Statement) </td></tr>
<tr><td align="left" balign="left"> # getSelection() : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> # canHaveAsSelection(selection : ArrayList&lt;EntityLiteral&gt;) : boolean </td></tr>
<tr><td align="left" balign="left"> # calculateSelection() </td></tr>
<tr><td align="left" balign="left"> # getCurrentIndex() : int </td></tr>
<tr><td align="left" balign="left"> # canHaveAsCurrentIndex(selectedIndex : int) : boolean </td></tr>
<tr><td align="left" balign="left"> # setSelectedIndex(selectedIndex : int) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # isAtStartOfIteration() : boolean </td></tr>
<tr><td align="left" balign="left"> # startIteration() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./ForEach.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.False
	false [label=<<table title="model.programs.parsing.language.expression.constant.False" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./False.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> False </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + False(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./False.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.constant.Self
	self [label=<<table title="model.programs.parsing.language.expression.constant.Self" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Self.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Self </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Self(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;Entity&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Self.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.Null
	null [label=<<table title="model.programs.parsing.language.expression.constant.Null" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Null.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Null </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Null(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./Null.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.GetDirection
	getdir [label=<<table title="model.programs.parsing.language.expression.constant.GetDirection" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetDirection.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetDirection </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetDirection(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./GetDirection.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.True
	true [label=<<table title="model.programs.parsing.language.expression.constant.True" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./True.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> True </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + True(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./True.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.literal.EntityLiteral
	entityliteral [label=<<table title="model.programs.parsing.language.expression.constant.literal.EntityLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./literal/EntityLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EntityLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EntityLiteral(line : int, column : int, entity : Entity) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsValue(value : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./literal/EntityLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.literal.DoubleLiteral
	doubleliteral [label=<<table title="model.programs.parsing.language.expression.constant.literal.DoubleLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./literal/DoubleLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DoubleLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DoubleLiteral(line : int, column : int, value : Double) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./literal/DoubleLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.literal.BooleanLiteral
	booleanliteral [label=<<table title="model.programs.parsing.language.expression.constant.literal.BooleanLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./literal/BooleanLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BooleanLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BooleanLiteral(line : int, column : int, value : Boolean) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./literal/BooleanLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean
	booleantoboolean [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfBooleanToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfBooleanToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfBooleanToBoolean(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfBooleanToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	doubletodouble [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfNumberToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfNumberToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfNumberToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfNumberToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	entitytodouble [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfEntityToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfEntityToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfEntityToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : EntityLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfEntityToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.Not
	not [label=<<table title="model.programs.parsing.language.expression.first_order.Not" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Not.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Not </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Not(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Not.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
//	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToEntity
//	entitytoentity [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToEntity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfEntityToEntity.html">
//		<tr><td><table border="0" cellspacing="0" cellpadding="1">
//<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfEntityToEntity </font></td></tr>
//		</table></td></tr>
//		<tr><td><table border="0" cellspacing="0" cellpadding="1">
//<tr><td align="left" balign="left">  </td></tr>
//		</table></td></tr>
//		<tr><td><table border="0" cellspacing="0" cellpadding="1">
//<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : EntityLiteral) : EntityLiteral </font></td></tr>
//<tr><td align="left" balign="left"> + evaluate() : EntityLiteral </td></tr>
//		</table></td></tr>
//		</table>>, URL="./FirstOrderExpressionOfEntityToEntity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// model.programs.parsing.language.expression.first_order.GetX
	getx [label=<<table title="model.programs.parsing.language.expression.first_order.GetX" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetX.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetX </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetX(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetX.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetRadius
	getr [label=<<table title="model.programs.parsing.language.expression.first_order.GetRadius" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetRadius.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetRadius </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetRadius(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetRadius.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetVY
	getvy [label=<<table title="model.programs.parsing.language.expression.first_order.GetVY" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetVY.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetVY </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetVY(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetVY.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetY
	gety [label=<<table title="model.programs.parsing.language.expression.first_order.GetY" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetY.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetY </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetY(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetY.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.FirstOrderExpression
	firstorderexpression [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ argument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpression(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # getArgument() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setArgument(argument : Expression) </td></tr>
<tr><td align="left" balign="left"> + setParentProgram(parrentProgram : Program) </td></tr>
<tr><td align="left" balign="left"> + toString() : String </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetVX
	getvx [label=<<table title="model.programs.parsing.language.expression.first_order.GetVX" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetVX.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetVX </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetVX(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetVX.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.Sine
	sin [label=<<table title="model.programs.parsing.language.expression.first_order.Sine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Sine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.Cosine
	cos [label=<<table title="model.programs.parsing.language.expression.first_order.Cosine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Cosine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Cosine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Cosine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Cosine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.SquareRoot
	sqrt [label=<<table title="model.programs.parsing.language.expression.first_order.SquareRoot" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SquareRoot.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SquareRoot </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SquareRoot(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SquareRoot.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.And
	and [label=<<table title="model.programs.parsing.language.expression.second_order.And" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./And.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> And </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + And(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./And.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Or
	or [label=<<table title="model.programs.parsing.language.expression.second_order.Or" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Or.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Or </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Or(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Or.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.NotEquals
	notequals [label=<<table title="model.programs.parsing.language.expression.second_order.NotEquals" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NotEquals.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NotEquals </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + NotEquals(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./NotEquals.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Equals
	equals [label=<<table title="model.programs.parsing.language.expression.second_order.Equals" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Equals.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Equals </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Equals(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Equals.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	
	// model.programs.parsing.language.expression.second_order.GT
	gt [label=<<table title="model.programs.parsing.language.expression.second_order.GT" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GT.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GT </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GT(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GT.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean
	doublestoboolean [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfNumbersToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.LT
	lt [label=<<table title="model.programs.parsing.language.expression.second_order.LT" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LT.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LT </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LT(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./LT.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.LE
	le [label=<<table title="model.programs.parsing.language.expression.second_order.LE" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LE.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LE </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LE(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./LE.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.GE
	ge [label=<<table title="model.programs.parsing.language.expression.second_order.GE" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GE.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GE </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GE(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GE.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Addition
	addition [label=<<table title="model.programs.parsing.language.expression.second_order.Addition" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Addition.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Addition </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Addition(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Addition.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Multiplication
	multiplication [label=<<table title="model.programs.parsing.language.expression.second_order.Multiplication" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Multiplication.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Multiplication </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Multiplication(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Multiplication.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Subtraction
	subtraction [label=<<table title="model.programs.parsing.language.expression.second_order.Subtraction" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Subtraction.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Subtraction </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Subtraction(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Subtraction.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Division
	division [label=<<table title="model.programs.parsing.language.expression.second_order.Division" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Division.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Division </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Division(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Division.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	doublestodouble [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfNumbersToNumber(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean
	booleanstoboolean [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfBooleansToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfBooleansToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfBooleansToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfBooleansToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		
	// EDGES
	
	//Program
	program:p -> SHIP:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	SHIP:p -> program:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	program:p -> programpart:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];

	//ProgramPart

	//Statement
	statement:p -> programpart:p [dir=back,arrowtail=empty];
	statement:p -> program:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];

	//Action
	action:p -> statement:p [dir=back,arrowtail=empty];
	//Fire
	fire:p -> action:p [dir=back,arrowtail=empty];
	//Skip
	skip:p -> action:p [dir=back,arrowtail=empty];
	//ThrustOn
	thruston:p -> action:p [dir=back,arrowtail=empty];
	//ThrustOff
	thrustoff:p -> action:p [dir=back,arrowtail=empty];
	//Turn
	turn:p -> action:p [dir=back,arrowtail=empty];

	//If
	if:p -> statement:p [dir=back,arrowtail=empty];

	//ForEach
	foreach:p -> statement:p [dir=back,arrowtail=empty];

	//Sequence
	sequence:p -> statement:p [dir=back,arrowtail=empty];

	//Assignment
	assignment:p -> statement:p [dir=back,arrowtail=empty];

	//Assignment
	while:p -> statement:p [dir=back,arrowtail=empty];

	//Assignment
	print:p -> statement:p [dir=back,arrowtail=empty];

	//Expression
	expression:p -> programpart:p [dir=back,arrowtail=empty];

	//Variable
	variable:p -> expression:p [dir=back,arrowtail=empty];

	
	//ConstantExpression
	constantexpression:p -> expression:p [dir=back,arrowtail=empty];

	//BooleanLiteral
	booleanliteral:p -> constantexpression:p [dir=back,arrowtail=empty];
	//True
	true:p -> booleanliteral:p [dir=back,arrowtail=empty];
	//False
	false:p -> booleanliteral:p [dir=back,arrowtail=empty];

	//DoubleLiteral
	doubleliteral:p -> constantexpression:p [dir=back,arrowtail=empty];
	//GetDir
	getdir:p -> doubleliteral:p [dir=back,arrowtail=empty];

	//EntityLiteral
	entityliteral:p -> constantexpression:p [dir=back,arrowtail=empty];
	//Self
	self:p -> entityliteral:p [dir=back,arrowtail=empty];
	//Null
	null:p -> entityliteral:p [dir=back,arrowtail=empty];

	
	//FirstOrderExpression
	firstorderexpression:p -> expression:p [dir=back,arrowtail=empty];
	
	//BooleanToBoolean
	booleantoboolean:p -> firstorderexpression:p [dir=back,arrowtail=empty];
	//Not
	not:p -> booleantoboolean:p [dir=back,arrowtail=empty];
	
	////EntityToEntity
	//entitytoentity:p -> firstorderexpression:p [dir=back,arrowtail=empty];
	////Self
	//self:p -> entitytoentity:p [dir=back,arrowtail=empty];
	////Null
	//null:p -> entitytoentity:p [dir=back,arrowtail=empty];

	//EntityToDouble
	entitytodouble:p -> firstorderexpression:p [dir=back,arrowtail=empty];
	//GetX
	getx:p -> entitytodouble:p [dir=back,arrowtail=empty];
	//GetY
	gety:p -> entitytodouble:p [dir=back,arrowtail=empty];
	//GetVX
	getvx:p -> entitytodouble:p [dir=back,arrowtail=empty];
	//GetVY
	getvy:p -> entitytodouble:p [dir=back,arrowtail=empty];
	//GetR
	getr:p -> entitytodouble:p [dir=back,arrowtail=empty];
	
	//DoubleToDouble
	doubletodouble:p -> firstorderexpression:p [dir=back,arrowtail=empty];
	//Sin
	sin:p -> doubletodouble:p [dir=back,arrowtail=empty];
	//Cos
	cos:p -> doubletodouble:p [dir=back,arrowtail=empty];
	//Sqrt
	sqrt:p -> doubletodouble:p [dir=back,arrowtail=empty];

	
	//SecondOrderExpression
	secondorderexpression:p -> expression:p [dir=back,arrowtail=empty];
	
	//BooleansToBoolean
 	booleanstoboolean:p -> secondorderexpression:p [dir=back,arrowtail=empty];
	//And
 	and:p -> booleanstoboolean:p [dir=back,arrowtail=empty];
	//Or
 	or:p -> booleanstoboolean:p [dir=back,arrowtail=empty];
	
	// //EntitiesToBoolean
 	// entitiestoboolean:p -> secondorderexpression:p [dir=back,arrowtail=empty];
	
	//DoublesToBoolean
 	doublestoboolean:p -> secondorderexpression:p [dir=back,arrowtail=empty];
	//GE
 	ge:p -> doublestoboolean:p [dir=back,arrowtail=empty];
	//GT
 	gt:p -> doublestoboolean:p [dir=back,arrowtail=empty];
	//LE
 	le:p -> doublestoboolean:p [dir=back,arrowtail=empty];
	//LT
 	lt:p -> doublestoboolean:p [dir=back,arrowtail=empty];
	//Equals
 	equals:p -> doublestoboolean:p [dir=back,arrowtail=empty];
	//NotEquals
 	notequals:p -> doublestoboolean:p [dir=back,arrowtail=empty];
	
	//DoublesToDouble
 	doublestodouble:p -> secondorderexpression:p [dir=back,arrowtail=empty];
	//Addition
 	addition:p -> doublestodouble:p [dir=back,arrowtail=empty];
	//Subtraction
 	subtraction:p -> doublestodouble:p [dir=back,arrowtail=empty];
	//Multiplication
 	multiplication:p -> doublestodouble:p [dir=back,arrowtail=empty];
	//Division
 	division:p -> doublestodouble:p [dir=back,arrowtail=empty];
}