#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6 (http://www.umlgraph.org/)
#

digraph G {
	edge [weight=1.2, fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	splines = ortho;
	//size="16.0, 22.5";
	nodesep=1;
	ranksep=0.3;

	// EXAMPLES
	// //world.entity.Bullet extends world.entity.Entity
	// c15575:p -> c15576:p [dir=back,arrowhead=empty];

	// //world.entity.ship.Ship implements model.IShip
	// c15485:p -> c15578:p [dir=back,arrowhead=empty,style=dashed];

	// // model.programs.Program NAVASSOC world.entity.ship.Ship
	// c15492:p -> c15578:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];

	// NODES
 subgraph cluster_world {
                label = "world";
		color = "blue";

	// world.World
	world [label=<<table title="world.World" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./World.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> World </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - serialVersionUID : long </td></tr>
<tr><td align="left" balign="left"> - xSize : double </td></tr>
<tr><td align="left" balign="left"> - ySize : double </td></tr>
<tr><td align="left" balign="left"> - gameTime : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + World(xSize : double, ySize : double) </td></tr>
<tr><td align="left" balign="left"> + World() </td></tr>
<tr><td align="left" balign="left"> # advanceGameTime(time : double) </td></tr>
<tr><td align="left" balign="left"> + add(entity : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + evolve(dt : double, coll : CollisionListener) </td></tr>
<tr><td align="left" balign="left"> - getNextCollision() : Collision </td></tr>
<tr><td align="left" balign="left"> - advanceAll(dt : double) </td></tr>
<tr><td align="left" balign="left"> + isInWorld(position : Position) : boolean </td></tr>
<tr><td align="left" balign="left"> - isInWorld(entity : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> - isSpaceForEntity(entity : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + numberOfEntities() : int </td></tr>
		</table></td></tr>
		</table>>, URL="./World.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
 subgraph cluster_entity {
                label = "entity";
		color = blue;

	// world.entity.Entity
	entity [label=<<table title="world.entity.Entity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Entity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> <font face = "Helvetica-Oblique">Entity </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # position : Position </td></tr>
<tr><td align="left" balign="left"> # velocity : Velocity </td></tr>
<tr><td align="left" balign="left"> # direction : Direction </td></tr>
<tr><td align="left" balign="left"> - shape : CircleShape </td></tr>
<tr><td align="left" balign="left"> # speedLimit : double </td></tr>
<tr><td align="left" balign="left"> - mass : Mass </td></tr>
<tr><td align="left" balign="left"> # world : World </td></tr>
<tr><td align="left" balign="left"> # isTerminated : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Entity(direction : Direction, position : Position, speedLimit : double, velocity : Velocity, shape : CircleShape, mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + Entity() </td></tr>
<tr><td align="left" balign="left"> + isTerminated() : boolean </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + move(duration : double) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Entity) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Ship) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> # collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Border) </td></tr>
<tr><td align="left" balign="left"> + turn(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + bounce(that : Entity) </td></tr>
<tr><td align="left" balign="left"> + overlapsWith(e : Entity) : boolean </td></tr>
<tr><td align="left" balign="left"> + distanceTo(e : Entity) : double </td></tr>
<tr><td align="left" balign="left"> + distanceTo(p : Position) : double </td></tr>
<tr><td align="left" balign="left"> + distanceBetween(other : Entity, duration : double) : double </td></tr>
		</table></td></tr>
		</table>>, URL="../Entity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// world.entity.Asteroid
	asteroid [label=<<table title="world.entity.Asteroid" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Asteroid.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Asteroid </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - PERIOD : double </td></tr>
<tr><td align="left" balign="left"> - HARDNESS : double </td></tr>
<tr><td align="left" balign="left"> - DENSITY : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Asteroid(direction : Direction, position : Position, velocity : Velocity, shape : CircleShape) </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Ship) </td></tr>
		</table></td></tr>
		</table>>, URL="./Asteroid.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// world.entity.Bullet
	bullet [label=<<table title="world.entity.Bullet" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Bullet.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Bullet </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - bounceCounter : byte </td></tr>
<tr><td align="left" balign="left"> - shooter : Ship </td></tr>
<tr><td align="left" balign="left"> - bulletRadius : double </td></tr>
<tr><td align="left" balign="left"> - bulletInitialVelocity : double </td></tr>
<tr><td align="left" balign="left"> - density : double </td></tr>
<tr><td align="left" balign="left"> + maximumBorderBounces : byte </td></tr>

</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Bullet(ship : Ship) </td></tr>
<tr><td align="left" balign="left"> - getInitialPosition(ship : Ship) : Position </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Ship) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Border) </td></tr>
<tr><td align="left" balign="left"> + unlinkFromShooter() </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
		</table></td></tr>
		</table>>, URL="../Bullet.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

 subgraph cluster_ship {
                label = "ship";
		color = blue;

		// world.entity.ship.Thruster
	thruster [label=<<table title="world.entity.ship.Thruster" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Thruster.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Thruster </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - maximumThrustPerSecond : double </td></tr>
<tr><td align="left" balign="left"> - isActivated : boolean </td></tr>
<tr><td align="left" balign="left"> - ownerShip : Ship </td></tr>
<tr><td align="left" balign="left"> - isTerminated : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Thruster(maximumThrust : double, owner : Ship) </td></tr>
<tr><td align="left" balign="left"> + isActivated() : boolean </td></tr>
<tr><td align="left" balign="left"> + activate() </td></tr>
<tr><td align="left" balign="left"> + deactivate() </td></tr>
<tr><td align="left" balign="left"> + toggleActivation() </td></tr>
<tr><td align="left" balign="left"> + getOwner() : Ship </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + isTerminated() : boolean </td></tr>
<tr><td align="left" balign="left"> + thrust(duration : double) </td></tr>
<tr><td align="left" balign="left"> + thrust(thrustPerSecond : double, duration : double) </td></tr>
		</table></td></tr>
		</table>>, URL="./Thruster.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// world.entity.ship.Ship
	ship [label=<<table title="world.entity.ship.Ship" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Ship.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Ship </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - minimumRadius : double </td></tr>
<tr><td align="left" balign="left"> - thruster : Thruster </td></tr>
<tr><td align="left" balign="left"> - bulletList : ArrayList&lt;Bullet&gt; </td></tr>
<tr><td align="left" balign="left"> ~ program : Program </td></tr>
<tr><td align="left" balign="left"> - thrustPerSecond : double </td></tr>
<tr><td align="left" balign="left"> - MAXIMUM_AMOUNT_OF_BULLETS : byte </td></tr>
<tr><td align="left" balign="left"> - SPEED_OF_ACTIONS : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Ship(direction : Direction, position : Position, speedLimit : double, velocity : Velocity, shape : CircleShape, mass : Mass) </td></tr>
<tr><td align="left" balign="left"> + Ship() </td></tr>
<tr><td align="left" balign="left"> + terminate() </td></tr>
<tr><td align="left" balign="left"> + advance(dt : double) </td></tr>
<tr><td align="left" balign="left"> + canFire() : boolean </td></tr>
<tr><td align="left" balign="left"> + fire() </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Asteroid) </td></tr>
<tr><td align="left" balign="left"> + collideWith(that : Bullet) </td></tr>
<tr><td align="left" balign="left"> + getThrustPerSecond() : double </td></tr>
		</table></td></tr>
		</table>>, URL="./Ship.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}
}

subgraph cluster_physics {
                label = "physics";
		color = blue;
		
subgraph cluster_vector {
                label = "vector";
		color = blue;

		// world.physics.vector.Force
	force [label=<<table title="world.physics.vector.Force" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Force.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Force </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Force(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Force(v : Vector) </td></tr>
<tr><td align="left" balign="left"> + Force() </td></tr>
		</table></td></tr>
		</table>>, URL="./Force.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// world.physics.vector.Acceleration
	acceleration [label=<<table title="world.physics.vector.Acceleration" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Acceleration.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Acceleration </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Acceleration(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Acceleration(v : Vector) </td></tr>
<tr><td align="left" balign="left"> + Acceleration() </td></tr>
		</table></td></tr>
		</table>>, URL="./Acceleration.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.vector.Direction
	direction [label=<<table title="world.physics.vector.Direction" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Direction.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Direction </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - angle : Angle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Direction(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + Direction(angle : double) </td></tr>
<tr><td align="left" balign="left"> + Direction() </td></tr>
<tr><td align="left" balign="left"> + getAngle() : Angle </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : Angle) : boolean </td></tr>
<tr><td align="left" balign="left"> + setAngle(angle : Angle) </td></tr>
<tr><td align="left" balign="left"> + _X() : double </td></tr>
<tr><td align="left" balign="left"> + _Y() : double </td></tr>
<tr><td align="left" balign="left"> + rotate(angle : Angle) </td></tr>
		</table></td></tr>
		</table>>, URL="./Direction.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.vector.Velocity
	velocity [label=<<table title="world.physics.vector.Velocity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Velocity.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Velocity </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - SPEED_OF_LIGHT : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Velocity(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Velocity(v : Vector) </td></tr>
<tr><td align="left" balign="left"> + Velocity() </td></tr>
<tr><td align="left" balign="left"> + setX(x : double) </td></tr>
<tr><td align="left" balign="left"> + setY(y : double) </td></tr>
<tr><td align="left" balign="left"> + get() : double </td></tr>
<tr><td align="left" balign="left"> + getSum(v : Vector) : Velocity </td></tr>
<tr><td align="left" balign="left"> + accelerateBy(a : Acceleration, duration : double) </td></tr>
<tr><td align="left" balign="left"> + getSpeedOfLight() : double </td></tr>
		</table></td></tr>
		</table>>, URL="./Velocity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.vector.Position
	position [label=<<table title="world.physics.vector.Position" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Position.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Position </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Position(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Position(v : Vector) </td></tr>
<tr><td align="left" balign="left"> + Position() </td></tr>
<tr><td align="left" balign="left"> + getSum(v : Vector) : Position </td></tr>
<tr><td align="left" balign="left"> + moveBy(v : Velocity, duration : double) </td></tr>
<tr><td align="left" balign="left"> + getPositionAfterMove(v : Velocity, duration : double) : Position </td></tr>
		</table></td></tr>
		</table>>, URL="./Position.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.vector.Vector
	vector [label=<<table title="world.physics.vector.Vector" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Vector.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Vector </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # components : double[] </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Vector(x : double, y : double) </td></tr>
<tr><td align="left" balign="left"> + Vector(v : Vector) </td></tr>
<tr><td align="left" balign="left"> + Vector() </td></tr>
<tr><td align="left" balign="left"> + getSum(v : Vector) : Vector </td></tr>
<tr><td align="left" balign="left"> + getDifference(v : Vector) : Vector </td></tr>
<tr><td align="left" balign="left"> + getScaledBy(factor : double) : Vector </td></tr>
<tr><td align="left" balign="left"> + dotProduct(v : Vector) : double </td></tr>
<tr><td align="left" balign="left"> + getMagnitude() : double </td></tr>
<tr><td align="left" balign="left"> + getUnitVectorInDirection() : Vector </td></tr>
<tr><td align="left" balign="left"> + getDistanceTo(v : Vector) : double </td></tr>
<tr><td align="left" balign="left"> + getQuadrant() : Quadrant </td></tr>
		</table></td></tr>
		</table>>, URL="./Vector.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

subgraph cluster_geometry {
	 label = "geometry";
		// world.physics.geometry.Angle
	angle [label=<<table title="world.physics.geometry.Angle" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Angle.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Angle </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - angle : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Angle(angle : double) </td></tr>
<tr><td align="left" balign="left"> + Angle() </td></tr>
<tr><td align="left" balign="left"> + getSin() : double </td></tr>
<tr><td align="left" balign="left"> + getCos() : double </td></tr>
<tr><td align="left" balign="left"> + add(a : Angle) </td></tr>
		</table></td></tr>
		</table>>, URL="./Angle.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.geometry.CircleShape
	shape [label=<<table title="world.physics.geometry.CircleShape" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./CircleShape.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> CircleShape </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - radius : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + CircleShape(radius : double) </td></tr>
<tr><td align="left" balign="left"> + CircleShape() </td></tr>
		</table></td></tr>
		</table>>, URL="./CircleShape.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}	
	// world.physics.Mass
	mass [label=<<table title="world.physics.Mass" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Mass.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Mass </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - mass : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Mass(mass : double) </td></tr>
<tr><td align="left" balign="left"> + get() : double </td></tr>
<tr><td align="left" balign="left"> # canHaveAsMass(mass : double) : boolean </td></tr>
<tr><td align="left" balign="left"> - set(mass : double) </td></tr>
		</table></td></tr>
		</table>>, URL="./Mass.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

subgraph cluster_collision {

	 label = "collision";
	// world.physics.collision.Collision
	collision [label=<<table title="world.physics.collision.Collision" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Collision.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Collision </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # collisionPosition : Position </td></tr>
<tr><td align="left" balign="left"> # world : World </td></tr>
<tr><td align="left" balign="left"> # timeToCollision : double </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Collision(world : World) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # calculateCollisionPosition() </font></td></tr>
<tr><td align="left" balign="left"> + getTimeToCollision() : double </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # calculateCollisionTime() </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + resolve() </font></td></tr>
<tr><td align="left" balign="left"> + getNextCollision(world : World) : Collision </td></tr>
		</table></td></tr>
		</table>>, URL="./Collision.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// world.physics.collision.BorderCollision
	bordercollision [label=<<table title="world.physics.collision.BorderCollision" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./BorderCollision.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BorderCollision </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - collisionBorder : Border </td></tr>
<tr><td align="left" balign="left"> - collisionEntity : Entity </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BorderCollision(world : World, entity : Entity) </td></tr>
<tr><td align="left" balign="left"> + resolve() </td></tr>
<tr><td align="left" balign="left"> + getTimeToCollision() : double </td></tr>
<tr><td align="left" balign="left"> - getTimeToBorderCollision(border : Border) : double </td></tr>
<tr><td align="left" balign="left"> # calculateCollisionTime() </td></tr>
<tr><td align="left" balign="left"> # calculateCollisionPosition() </td></tr>
		</table></td></tr>
		</table>>, URL="./BorderCollision.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// world.physics.collision.EntityCollision
	entitycollision [label=<<table title="world.physics.collision.EntityCollision" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./EntityCollision.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EntityCollision </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - entity1 : Entity </td></tr>
<tr><td align="left" balign="left"> - entity2 : Entity </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EntityCollision(world : World, entity1 : Entity, entity2 : Entity) </td></tr>
<tr><td align="left" balign="left"> + resolve() </td></tr>
<tr><td align="left" balign="left"> # calculateCollisionTime() </td></tr>
<tr><td align="left" balign="left"> # calculateCollisionPosition() </td></tr>
		</table></td></tr>
		</table>>, URL="./EntityCollision.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// world.physics.collision.Border
	border [label=<<table title="world.physics.collision.Border" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Border.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;enumeration&#187; </td></tr>
<tr><td align="center" balign="center"> Border </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> BORDER_TOP </td></tr>
<tr><td align="left" balign="left"> BORDER_BOTTOM </td></tr>
<tr><td align="left" balign="left"> BORDER_RIGHT </td></tr>
<tr><td align="left" balign="left"> BORDER_LEFT </td></tr>
		</table></td></tr>
		</table>>, URL="./Border.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}
}

	//Entity
	entity:p -> world:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open,dir ="both"];
	entity:p -> entitycollision:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];
	entity:p -> bordercollision:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];

	//Ship
	ship:p -> entity:p [arrowhead=empty];
	ship:p -> thruster:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, arrowtail=open, dir="both"];
	//Thruster

	//Asteroid
	asteroid:p -> entity:p [arrowhead=empty];

	//Bullet
	bullet:p -> entity:p [arrowhead=empty];
	bullet:p -> ship:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open, dir="both"];

	//Mass
	mass:p -> entity:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];
	
	//Shape
	shape:p -> entity:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];
	
	//Vector

	//Position
	position:p -> vector:p [arrowhead=empty];
	position:p -> collision:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	position:p -> entity:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];


	//Direction
	direction:p -> vector:p [arrowhead=empty];
	direction:p -> entity:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];
	//Angle
	angle:p -> direction:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];


	//Velocity
	velocity:p -> vector:p [arrowhead=empty];
	velocity:p -> entity:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];


	//Acceleration
	acceleration:p -> vector:p [arrowhead=empty];
	acceleration:p -> entity:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];

	//Force
	force:p -> vector:p [arrowhead=empty];

	//World
	world:p -> collision:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open];


	//Collision
	//BorderCollision
	bordercollision:p -> collision:p [arrowhead=empty];
	//EntityCollision
	entitycollision:p -> collision:p [arrowhead=empty];
	//Border
	border:p -> bordercollision:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];

	}
subgraph cluster_programs {
color = blue;
label ="programs"

	// model.programs.Program
	program [label=<<table title="model.programs.Program" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../../../model/programs/Program.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Program </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - globalTypes : Map&lt;String, Type&gt; </td></tr>
<tr><td align="left" balign="left"> - globalValues : HashMap&lt;String, ConstantExpression&lt;?&gt;&gt; </td></tr>
<tr><td align="left" balign="left"> ~ statement : Statement </td></tr>
<tr><td align="left" balign="left"> - owner : Ship </td></tr>
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Program(globals : Map&lt;String, Type&gt;, statement : Statement) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + executeUntilAfterNextAction() </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../../../model/programs/Program.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		program:p -> programpart:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, arrowtail=open];
	statement:p -> program:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, arrowtail=open];

subgraph cluster_language {
color = blue;
label ="language"
	programpart [label=<<table title="model.programs.parsing.language.ProgramPart" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../ProgramPart.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ProgramPart </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # parentProgram : Program </td></tr>
<tr><td align="left" balign="left"> ~ line : int </td></tr>
<tr><td align="left" balign="left"> ~ column : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ProgramPart(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + isTypeSafe() : boolean </font></td></tr>
		</table></td></tr>
		</table>>, URL="../ProgramPart.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

subgraph cluster_expression {
color = blue;
label ="expression"
	// model.programs.parsing.language.expression.Variable
	variable [label=<<table title="model.programs.parsing.language.expression.Variable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Variable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Variable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ name : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Variable(line : int, column : int, name : String) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;?&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./Variable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.Expression
	expression [label=<<table title="model.programs.parsing.language.expression.Expression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Expression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Expression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Expression(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + evaluate() : ConstantExpression&lt;?&gt; </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getType() : Type </font></td></tr>
		</table></td></tr>
		</table>>, URL="./Expression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		subgraph cluster_constexp {
		label = "constant";
		color = blue;
	// model.programs.parsing.language.expression.constant.ConstantExpression<T>
	constantexpression [label=<<table title="model.programs.parsing.language.expression.constant.ConstantExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./constant/ConstantExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> ConstantExpression&lt;T&gt; </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # value : T </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ConstantExpression(line : int, column : int, value : T) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;T&gt; </td></tr>
		</table></td></tr>
		</table>>, URL="./constant/ConstantExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		subgraph cluster_boolean {
		label = "boolean";
		color = blue;
	// model.programs.parsing.language.expression.constant.literal.BooleanLiteral
	booleanliteral [label=<<table title="model.programs.parsing.language.expression.constant.literal.BooleanLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./literal/BooleanLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BooleanLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + BooleanLiteral(line : int, column : int, value : Boolean) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./literal/BooleanLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		// model.programs.parsing.language.expression.constant.True
	true [label=<<table title="model.programs.parsing.language.expression.constant.True" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./True.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> True </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + True(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./True.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// model.programs.parsing.language.expression.constant.False
	false [label=<<table title="model.programs.parsing.language.expression.constant.False" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./False.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> False </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + False(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./False.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

}

subgraph cluster_entity {
label = "entityliteral";
color = blue;
// model.programs.parsing.language.expression.constant.literal.EntityLiteral
	entityliteral [label=<<table title="model.programs.parsing.language.expression.constant.literal.EntityLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./literal/EntityLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> EntityLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + EntityLiteral(line : int, column : int, entity : Entity) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./literal/EntityLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// model.programs.parsing.language.expression.constant.Self
	self [label=<<table title="model.programs.parsing.language.expression.constant.Self" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Self.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Self </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Self(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;Entity&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./Self.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.constant.Null
	null [label=<<table title="model.programs.parsing.language.expression.constant.Null" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Null.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Null </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Null(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./Null.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

subgraph cluster_doubleliteral {
label = "doubleliteral";
color = blue;
	// model.programs.parsing.language.expression.constant.literal.DoubleLiteral
	doubleliteral [label=<<table title="model.programs.parsing.language.expression.constant.literal.DoubleLiteral" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./literal/DoubleLiteral.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> DoubleLiteral </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + DoubleLiteral(line : int, column : int, value : Double) </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./literal/DoubleLiteral.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// model.programs.parsing.language.expression.constant.GetDirection
	getdir [label=<<table title="model.programs.parsing.language.expression.constant.GetDirection" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetDirection.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetDirection </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetDirection(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + evaluate() : ConstantExpression&lt;Double&gt; </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
		</table></td></tr>
		</table>>, URL="./GetDirection.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}


		}

		subgraph cluster_firstorder {

		label = "first_order";
		color = blue;
	// model.programs.parsing.language.expression.first_order.FirstOrderExpression
	firstorderexpression [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./first_order/FirstOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ argument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpression(line : int, column : int, argument : Expression) </td></tr>
		</table></td></tr>
		</table>>, URL="./first_order/FirstOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		subgraph cluster_btob {
		label = "boolean to boolean";
		color = blue;
		// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean
	booleantoboolean [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfBooleanToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfBooleanToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfBooleanToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfBooleanToBoolean(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfBooleanToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.Not
	not [label=<<table title="model.programs.parsing.language.expression.first_order.Not" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Not.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Not </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Not(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Not.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		}

		subgraph cluster_numbertonumber {
		label = "number to number";
		color = blue;
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber
	doubletodouble [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfNumberToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfNumberToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfNumberToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfNumberToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfNumberToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.Sine
	sin [label=<<table title="model.programs.parsing.language.expression.first_order.Sine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Sine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.Cosine
	cos [label=<<table title="model.programs.parsing.language.expression.first_order.Cosine" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Cosine.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Cosine </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Cosine(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Cosine.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.SquareRoot
	sqrt [label=<<table title="model.programs.parsing.language.expression.first_order.SquareRoot" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SquareRoot.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SquareRoot </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SquareRoot(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SquareRoot.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		}

subgraph cluster_entitytonumber {
label = "entity to number";
color = blue;
	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber
	entitytodouble [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfEntityToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfEntityToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # FirstOrderExpressionOfEntityToNumber(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : EntityLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./FirstOrderExpressionOfEntityToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		
//	// model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToEntity
//	entitytoentity [label=<<table title="model.programs.parsing.language.expression.first_order.FirstOrderExpressionOfEntityToEntity" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./FirstOrderExpressionOfEntityToEntity.html">
//		<tr><td><table border="0" cellspacing="0" cellpadding="1">
//<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> FirstOrderExpressionOfEntityToEntity </font></td></tr>
//		</table></td></tr>
//		<tr><td><table border="0" cellspacing="0" cellpadding="1">
//<tr><td align="left" balign="left">  </td></tr>
//		</table></td></tr>
//		<tr><td><table border="0" cellspacing="0" cellpadding="1">
//<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(argument : EntityLiteral) : EntityLiteral </font></td></tr>
//<tr><td align="left" balign="left"> + evaluate() : EntityLiteral </td></tr>
//		</table></td></tr>
//		</table>>, URL="./FirstOrderExpressionOfEntityToEntity.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// model.programs.parsing.language.expression.first_order.GetX
	getx [label=<<table title="model.programs.parsing.language.expression.first_order.GetX" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetX.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetX </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetX(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetX.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetRadius
	getr [label=<<table title="model.programs.parsing.language.expression.first_order.GetRadius" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetRadius.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetRadius </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetRadius(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetRadius.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetVY
	getvy [label=<<table title="model.programs.parsing.language.expression.first_order.GetVY" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetVY.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetVY </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetVY(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetVY.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.first_order.GetY
	gety [label=<<table title="model.programs.parsing.language.expression.first_order.GetY" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetY.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetY </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetY(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetY.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];


	// model.programs.parsing.language.expression.first_order.GetVX
	getvx [label=<<table title="model.programs.parsing.language.expression.first_order.GetVX" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GetVX.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GetVX </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GetVX(line : int, column : int, argument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(argument : EntityLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GetVX.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		}
}



		subgraph cluster_secondorder {

		label = "second_order";
		color = blue;
	// model.programs.parsing.language.expression.second_order.SecondOrderExpression
	secondorderexpression [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpression" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./second_order/SecondOrderExpression.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpression </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ firstArgument : Expression </td></tr>
<tr><td align="left" balign="left"> ~ secondArgument : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpression(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
		</table></td></tr>
		</table>>, URL="./second_order/SecondOrderExpression.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		subgraph cluster_booleanstoboolean {
		label = "booleans to boolean";
		color = blue;
	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean
	booleanstoboolean [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfBooleansToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfBooleansToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfBooleansToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfBooleansToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfBooleansToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// model.programs.parsing.language.expression.second_order.And
	and [label=<<table title="model.programs.parsing.language.expression.second_order.And" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./And.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> And </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + And(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./And.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Or
	or [label=<<table title="model.programs.parsing.language.expression.second_order.Or" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Or.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Or </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Or(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : BooleanLiteral, second : BooleanLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Or.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		}

		subgraph cluster_numberstoboolean {
		label = "numbers to boolean";
		color = blue;

		// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfEntitiesOrDoublesToBoolean
	doublestoboolean [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToBoolean" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToBoolean.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToBoolean </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfNumbersToBoolean(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # canHaveAsArgument(argument : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToBoolean.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// model.programs.parsing.language.expression.second_order.NotEquals
	notequals [label=<<table title="model.programs.parsing.language.expression.second_order.NotEquals" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./NotEquals.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> NotEquals </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./NotEquals.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Equals
	equals [label=<<table title="model.programs.parsing.language.expression.second_order.Equals" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Equals.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Equals </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Equals.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	

	// model.programs.parsing.language.expression.second_order.GT
	gt [label=<<table title="model.programs.parsing.language.expression.second_order.GT" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GT.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GT </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GT(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GT.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.LT
	lt [label=<<table title="model.programs.parsing.language.expression.second_order.LT" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LT.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LT </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LT(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./LT.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.LE
	le [label=<<table title="model.programs.parsing.language.expression.second_order.LE" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./LE.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> LE </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + LE(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./LE.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.GE
	ge [label=<<table title="model.programs.parsing.language.expression.second_order.GE" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./GE.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> GE </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + GE(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : BooleanLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./GE.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}
		subgraph cluster_numberstonumber {
		label = "numbers to number";
		color = blue;

	// model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber
	doublestodouble [label=<<table title="model.programs.parsing.language.expression.second_order.SecondOrderExpressionOfNumbersToNumber" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./SecondOrderExpressionOfNumbersToNumber.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> SecondOrderExpressionOfNumbersToNumber </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # SecondOrderExpressionOfNumbersToNumber(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </font></td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + getType() : Type </td></tr>
<tr><td align="left" balign="left"> + evaluate() : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./SecondOrderExpressionOfNumbersToNumber.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Addition
	addition [label=<<table title="model.programs.parsing.language.expression.second_order.Addition" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Addition.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Addition </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Addition(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Addition.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Multiplication
	multiplication [label=<<table title="model.programs.parsing.language.expression.second_order.Multiplication" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Multiplication.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Multiplication </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Multiplication(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Multiplication.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Subtraction
	subtraction [label=<<table title="model.programs.parsing.language.expression.second_order.Subtraction" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Subtraction.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Subtraction </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Subtraction(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Subtraction.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.expression.second_order.Division
	division [label=<<table title="model.programs.parsing.language.expression.second_order.Division" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Division.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Division </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Division(line : int, column : int, firstArgument : Expression, secondArgument : Expression) </td></tr>
<tr><td align="left" balign="left"> # function(first : DoubleLiteral, second : DoubleLiteral) : DoubleLiteral </td></tr>
		</table></td></tr>
		</table>>, URL="./Division.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		}
		
}
}

subgraph cluster_assignment {
label = "statement";
color = blue;
	// model.programs.parsing.language.statement.Assignment
	assignment [label=<<table title="model.programs.parsing.language.statement.Assignment" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Assignment.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Assignment </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ variable : Variable </td></tr>
<tr><td align="left" balign="left"> ~ value : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Assignment(line : int, column : int, variable : Variable, value : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Assignment.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.Print
	print [label=<<table title="model.programs.parsing.language.statement.Print" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/Print.html">

	<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Print </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - textExpression : Expression </td></tr>
<tr><td align="left" balign="left"> - text : String </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Print(line : int, column : int, textExpression : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/Print.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.While
	while [label=<<table title="model.programs.parsing.language.statement.While" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/While.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> While </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> - body : Statement </td></tr>
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + While(line : int, column : int, condition : Expression, body : Statement) </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/While.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.If
	if [label=<<table title="model.programs.parsing.language.statement.If" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/If.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> If </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ resultOfCondition : boolean </td></tr>
<tr><td align="left" balign="left"> - checked : boolean </td></tr>
<tr><td align="left" balign="left"> ~ condition : Expression </td></tr>
<tr><td align="left" balign="left"> ~ then : Statement </td></tr>
<tr><td align="left" balign="left"> ~ otherwise : Statement </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + If(line : int, column : int, condition : Expression, then : Statement, otherwise : Statement) </td></tr>
<tr><td align="left" balign="left"> # isChecked() : boolean </td></tr>
<tr><td align="left" balign="left"> # checkCondition() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> - execute(statement : Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/If.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Turn
	turn [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../statement/action/Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
<tr><td align="left" balign="left"> # getAngle() : Expression </td></tr>
<tr><td align="left" balign="left"> # canHaveAsAngle(angle : Expression) : boolean </td></tr>
<tr><td align="left" balign="left"> # setAngle(angle : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../statement/action/Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	
	// model.programs.parsing.language.statement.Statement
	statement [label=<<table title="model.programs.parsing.language.statement.Statement" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="../Statement.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Statement </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - finished : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # Statement(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + isFinished() : boolean </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + containsAction() : boolean </font></td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="../Statement.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		subgraph cluster_action {
		label = "action";
		color = blue;
	// model.programs.parsing.language.statement.action.Action
	action [label=<<table title="model.programs.parsing.language.statement.action.Action" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Action.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> Action </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Action(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Action.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Fire
	fire [label=<<table title="model.programs.parsing.language.statement.action.Fire" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Fire.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Fire </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Fire(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Fire.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.ThrustOn
	thruston [label=<<table title="model.programs.parsing.language.statement.action.ThrustOn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThrustOn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThrustOn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ThrustOn(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./ThrustOn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.Skip
	skip [label=<<table title="model.programs.parsing.language.statement.action.Skip" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Skip.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Skip </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Skip(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Skip.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

	// model.programs.parsing.language.statement.action.ThrustOff
	thrustoff [label=<<table title="model.programs.parsing.language.statement.action.ThrustOff" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ThrustOff.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ThrustOff </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ThrustOff(line : int, column : int) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./ThrustOff.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];

		// model.programs.parsing.language.statement.action.Turn
	turn [label=<<table title="model.programs.parsing.language.statement.action.Turn" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Turn.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Turn </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ angle : Expression </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Turn(line : int, column : int, angle : Expression) </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Turn.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

	// model.programs.parsing.language.statement.Sequence
	sequence [label=<<table title="model.programs.parsing.language.statement.Sequence" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./Sequence.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Sequence </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - sequence : List&lt;Statement&gt; </td></tr>
<tr><td align="left" balign="left"> - selectedIndex : int </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Sequence(line : int, column : int, sequence : List&lt;Statement&gt;) </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # getCurrentStatement() : Statement </td></tr>
<tr><td align="left" balign="left"> # finish() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./Sequence.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		
	// model.programs.parsing.language.statement.ForEach
	foreach [label=<<table title="model.programs.parsing.language.statement.ForEach" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./ForEach.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> ForEach </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - type : ProgramFactory.ForeachType </td></tr>
<tr><td align="left" balign="left"> ~ variableName : String </td></tr>
<tr><td align="left" balign="left"> ~ body : Statement </td></tr>
<tr><td align="left" balign="left"> - selection : ArrayList&lt;EntityLiteral&gt; </td></tr>
<tr><td align="left" balign="left"> - currentIndex : int </td></tr>
<tr><td align="left" balign="left"> - AtStartOfIteration : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + ForEach(line : int, column : int, type : ProgramFactory.ForeachType, variableName : String, body : Statement) </td></tr>
<tr><td align="left" balign="left"> # calculateSelection() </td></tr>
<tr><td align="left" balign="left"> # incrementIndex() </td></tr>
<tr><td align="left" balign="left"> # isAtStartOfIteration() : boolean </td></tr>
<tr><td align="left" balign="left"> # startIteration() </td></tr>
<tr><td align="left" balign="left"> # finishIteration() </td></tr>
<tr><td align="left" balign="left"> + unfinish() </td></tr>
<tr><td align="left" balign="left"> + execute() : boolean </td></tr>
<tr><td align="left" balign="left"> + isTypeSafe() : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAction() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./ForEach.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
		}

	//Program


	//ProgramPart

	//Statement
	statement:p -> programpart:p [arrowhead=empty];

	//Action
	action:p -> statement:p [arrowhead=empty];
	//Fire
	fire:p -> action:p [arrowhead=empty];
	//Skip
	skip:p -> action:p [arrowhead=empty];
	//ThrustOn
	thruston:p -> action:p [arrowhead=empty];
	//ThrustOff
	thrustoff:p -> action:p [arrowhead=empty];
	//Turn
	turn:p -> action:p [arrowhead=empty];

	//If
	if:p -> statement:p [arrowhead=empty];

	//ForEach
	foreach:p -> statement:p [arrowhead=empty];

	//Sequence
	sequence:p -> statement:p [arrowhead=empty];

	//Assignment
	assignment:p -> statement:p [arrowhead=empty];

	//While
	while:p -> statement:p [arrowhead=empty];

	//Print
	print:p -> statement:p [arrowhead=empty];

	//Expression
	expression:p -> programpart:p [arrowhead=empty];

	//Variable
	variable:p -> expression:p [arrowhead=empty];

	
	//ConstantExpression
	constantexpression:p -> expression:p [arrowhead=empty];

	//BooleanLiteral
	booleanliteral:p -> constantexpression:p [arrowhead=empty];
	//True
	true:p -> booleanliteral:p [arrowhead=empty];
	//False
	false:p -> booleanliteral:p [arrowhead=empty];

	//DoubleLiteral
	doubleliteral:p -> constantexpression:p [arrowhead=empty];
	//GetDir
	getdir:p -> doubleliteral:p [arrowhead=empty];

	//EntityLiteral
	entityliteral:p -> constantexpression:p [arrowhead=empty];
	//Self
	self:p -> entityliteral:p [arrowhead=empty];
	//Null
	null:p -> entityliteral:p [arrowhead=empty];

	
	//FirstOrderExpression
	firstorderexpression:p -> expression:p [arrowhead=empty];
	
	//BooleanToBoolean
	booleantoboolean:p -> firstorderexpression:p [arrowhead=empty];
	//Not
	not:p -> booleantoboolean:p [arrowhead=empty];
	
	////EntityToEntity
	//entitytoentity:p -> firstorderexpression:p [arrowhead=empty];
	////Self
	//self:p -> entitytoentity:p [arrowhead=empty];
	////Null
	//null:p -> entitytoentity:p [arrowhead=empty];

	//EntityToDouble
	entitytodouble:p -> firstorderexpression:p [arrowhead=empty];
	//GetX
	getx:p -> entitytodouble:p [arrowhead=empty];
	//GetY
	gety:p -> entitytodouble:p [arrowhead=empty];
	//GetVX
	getvx:p -> entitytodouble:p [arrowhead=empty];
	//GetVY
	getvy:p -> entitytodouble:p [arrowhead=empty];
	//GetR
	getr:p -> entitytodouble:p [arrowhead=empty];
	
	//DoubleToDouble
	doubletodouble:p -> firstorderexpression:p [arrowhead=empty];
	//Sin
	sin:p -> doubletodouble:p [arrowhead=empty];
	//Cos
	cos:p -> doubletodouble:p [arrowhead=empty];
	//Sqrt
	sqrt:p -> doubletodouble:p [arrowhead=empty];

	
	//SecondOrderExpression
	secondorderexpression:p -> expression:p [arrowhead=empty];
	
	//BooleansToBoolean
 	booleanstoboolean:p -> secondorderexpression:p [arrowhead=empty];
	//Or
 	or:p -> booleanstoboolean:p [arrowhead=empty];
 	and:p -> booleanstoboolean:p [arrowhead=empty];
	
	// //EntitiesToBoolean
 	// entitiestoboolean:p -> secondorderexpression:p [arrowhead=empty];
	
	//DoublesToBoolean
 	doublestoboolean:p -> secondorderexpression:p [arrowhead=empty];
	//GE
 	ge:p -> doublestoboolean:p [arrowhead=empty];
	//GT
 	gt:p -> doublestoboolean:p [arrowhead=empty];
	//L
	E
 	le:p -> doublestoboolean:p [arrowhead=empty];
	//LT
 	lt:p -> doublestoboolean:p [arrowhead=empty];
	//Equals
 	equals:p -> doublestoboolean:p [arrowhead=empty];
	//NotEquals
 	notequals:p -> doublestoboolean:p [arrowhead=empty];
	
	//DoublesToDouble
 	doublestodouble:p -> secondorderexpression:p [arrowhead=empty];
	//Addition
 	addition:p -> doublestodouble:p [arrowhead=empty];
	//Subtraction
 	subtraction:p -> doublestodouble:p [arrowhead=empty];
	//Multiplication
 	multiplication:p -> doublestodouble:p [arrowhead=empty];
	//Division
 	division:p -> doublestodouble:p [arrowhead=empty];
}
	}

	ship:p -> program:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open,arrowtail=open,  dir="both"];
}